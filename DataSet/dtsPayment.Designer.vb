'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dtsPayment"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtsPayment
    Inherits Global.System.Data.DataSet
    
    Private tableclientaccount As clientaccountDataTable
    
    Private tableloanaccount As loanaccountDataTable
    
    Private tablepaymentledger As paymentledgerDataTable
    
    Private relationpaymentledger_clientaccount As Global.System.Data.DataRelation
    
    Private relationpaymentledger_loanaccount As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("clientaccount")) Is Nothing) Then
                MyBase.Tables.Add(New clientaccountDataTable(ds.Tables("clientaccount")))
            End If
            If (Not (ds.Tables("loanaccount")) Is Nothing) Then
                MyBase.Tables.Add(New loanaccountDataTable(ds.Tables("loanaccount")))
            End If
            If (Not (ds.Tables("paymentledger")) Is Nothing) Then
                MyBase.Tables.Add(New paymentledgerDataTable(ds.Tables("paymentledger")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property clientaccount() As clientaccountDataTable
        Get
            Return Me.tableclientaccount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property loanaccount() As loanaccountDataTable
        Get
            Return Me.tableloanaccount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property paymentledger() As paymentledgerDataTable
        Get
            Return Me.tablepaymentledger
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dtsPayment = CType(MyBase.Clone,dtsPayment)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("clientaccount")) Is Nothing) Then
                MyBase.Tables.Add(New clientaccountDataTable(ds.Tables("clientaccount")))
            End If
            If (Not (ds.Tables("loanaccount")) Is Nothing) Then
                MyBase.Tables.Add(New loanaccountDataTable(ds.Tables("loanaccount")))
            End If
            If (Not (ds.Tables("paymentledger")) Is Nothing) Then
                MyBase.Tables.Add(New paymentledgerDataTable(ds.Tables("paymentledger")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableclientaccount = CType(MyBase.Tables("clientaccount"),clientaccountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableclientaccount) Is Nothing) Then
                Me.tableclientaccount.InitVars
            End If
        End If
        Me.tableloanaccount = CType(MyBase.Tables("loanaccount"),loanaccountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableloanaccount) Is Nothing) Then
                Me.tableloanaccount.InitVars
            End If
        End If
        Me.tablepaymentledger = CType(MyBase.Tables("paymentledger"),paymentledgerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepaymentledger) Is Nothing) Then
                Me.tablepaymentledger.InitVars
            End If
        End If
        Me.relationpaymentledger_clientaccount = Me.Relations("paymentledger_clientaccount")
        Me.relationpaymentledger_loanaccount = Me.Relations("paymentledger_loanaccount")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dtsPayment"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsPayment.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableclientaccount = New clientaccountDataTable()
        MyBase.Tables.Add(Me.tableclientaccount)
        Me.tableloanaccount = New loanaccountDataTable()
        MyBase.Tables.Add(Me.tableloanaccount)
        Me.tablepaymentledger = New paymentledgerDataTable()
        MyBase.Tables.Add(Me.tablepaymentledger)
        Me.relationpaymentledger_clientaccount = New Global.System.Data.DataRelation("paymentledger_clientaccount", New Global.System.Data.DataColumn() {Me.tablepaymentledger.CustomerCodeColumn}, New Global.System.Data.DataColumn() {Me.tableclientaccount.client_codeColumn}, false)
        Me.Relations.Add(Me.relationpaymentledger_clientaccount)
        Me.relationpaymentledger_loanaccount = New Global.System.Data.DataRelation("paymentledger_loanaccount", New Global.System.Data.DataColumn() {Me.tablepaymentledger.CustomerCodeColumn}, New Global.System.Data.DataColumn() {Me.tableloanaccount.ClientCodeColumn}, false)
        Me.Relations.Add(Me.relationpaymentledger_loanaccount)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeclientaccount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeloanaccount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializepaymentledger() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtsPayment = New dtsPayment()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub clientaccountRowChangeEventHandler(ByVal sender As Object, ByVal e As clientaccountRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub loanaccountRowChangeEventHandler(ByVal sender As Object, ByVal e As loanaccountRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub paymentledgerRowChangeEventHandler(ByVal sender As Object, ByVal e As paymentledgerRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class clientaccountDataTable
        Inherits Global.System.Data.TypedTableBase(Of clientaccountRow)
        
        Private columnclientID As Global.System.Data.DataColumn
        
        Private columnprofile_picture As Global.System.Data.DataColumn
        
        Private columnclient_code As Global.System.Data.DataColumn
        
        Private columncreated_by As Global.System.Data.DataColumn
        
        Private columncreatedDate As Global.System.Data.DataColumn
        
        Private columnspouse As Global.System.Data.DataColumn
        
        Private columnarea As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnlast_name As Global.System.Data.DataColumn
        
        Private columnfirst_name As Global.System.Data.DataColumn
        
        Private columnmiddle_name As Global.System.Data.DataColumn
        
        Private columngender As Global.System.Data.DataColumn
        
        Private columnage As Global.System.Data.DataColumn
        
        Private columnbirth_date As Global.System.Data.DataColumn
        
        Private columncivil_status As Global.System.Data.DataColumn
        
        Private columnmobile_no As Global.System.Data.DataColumn
        
        Private columnemail_add As Global.System.Data.DataColumn
        
        Private columnoccupation As Global.System.Data.DataColumn
        
        Private columnhome_add As Global.System.Data.DataColumn
        
        Private columnzipcode As Global.System.Data.DataColumn
        
        Private columnoffice_add As Global.System.Data.DataColumn
        
        Private columntin_no As Global.System.Data.DataColumn
        
        Private columnbank_account_type As Global.System.Data.DataColumn
        
        Private columnbank_account_no As Global.System.Data.DataColumn
        
        Private columnvalid_id_type As Global.System.Data.DataColumn
        
        Private columnvalid_id_no As Global.System.Data.DataColumn
        
        Private columnatm_card_type As Global.System.Data.DataColumn
        
        Private columnatm_card_no As Global.System.Data.DataColumn
        
        Private columncoFullName As Global.System.Data.DataColumn
        
        Private columncoAddress As Global.System.Data.DataColumn
        
        Private columncoNumber As Global.System.Data.DataColumn
        
        Private columncoOccupation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "clientaccount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property clientIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property profile_pictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprofile_picture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property client_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclient_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property created_byColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated_by
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property createdDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property spouseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspouse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnarea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property last_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property first_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfirst_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property middle_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmiddle_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property genderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property birth_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbirth_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property civil_statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncivil_status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property mobile_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmobile_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property email_addColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail_add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property occupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property home_addColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhome_add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property zipcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzipcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property office_addColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoffice_add
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property tin_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntin_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property bank_account_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbank_account_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property bank_account_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbank_account_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property valid_id_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalid_id_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property valid_id_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalid_id_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property atm_card_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatm_card_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property atm_card_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnatm_card_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property coFullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property coAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property coNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property coOccupationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoOccupation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As clientaccountRow
            Get
                Return CType(Me.Rows(index),clientaccountRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event clientaccountRowChanging As clientaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event clientaccountRowChanged As clientaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event clientaccountRowDeleting As clientaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event clientaccountRowDeleted As clientaccountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddclientaccountRow(ByVal row As clientaccountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddclientaccountRow( _
                    ByVal profile_picture() As Byte,  _
                    ByVal parentpaymentledgerRowBypaymentledger_clientaccount As paymentledgerRow,  _
                    ByVal created_by As String,  _
                    ByVal createdDate As Date,  _
                    ByVal spouse As String,  _
                    ByVal area As String,  _
                    ByVal description As String,  _
                    ByVal last_name As String,  _
                    ByVal first_name As String,  _
                    ByVal middle_name As String,  _
                    ByVal gender As String,  _
                    ByVal age As Integer,  _
                    ByVal birth_date As Date,  _
                    ByVal civil_status As String,  _
                    ByVal mobile_no As String,  _
                    ByVal email_add As String,  _
                    ByVal occupation As String,  _
                    ByVal home_add As String,  _
                    ByVal zipcode As String,  _
                    ByVal office_add As String,  _
                    ByVal tin_no As String,  _
                    ByVal bank_account_type As String,  _
                    ByVal bank_account_no As String,  _
                    ByVal valid_id_type As String,  _
                    ByVal valid_id_no As String,  _
                    ByVal atm_card_type As String,  _
                    ByVal atm_card_no As String,  _
                    ByVal coFullName As String,  _
                    ByVal coAddress As String,  _
                    ByVal coNumber As String,  _
                    ByVal coOccupation As String) As clientaccountRow
            Dim rowclientaccountRow As clientaccountRow = CType(Me.NewRow,clientaccountRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, profile_picture, Nothing, created_by, createdDate, spouse, area, description, last_name, first_name, middle_name, gender, age, birth_date, civil_status, mobile_no, email_add, occupation, home_add, zipcode, office_add, tin_no, bank_account_type, bank_account_no, valid_id_type, valid_id_no, atm_card_type, atm_card_no, coFullName, coAddress, coNumber, coOccupation}
            If (Not (parentpaymentledgerRowBypaymentledger_clientaccount) Is Nothing) Then
                columnValuesArray(2) = parentpaymentledgerRowBypaymentledger_clientaccount(7)
            End If
            rowclientaccountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowclientaccountRow)
            Return rowclientaccountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As clientaccountDataTable = CType(MyBase.Clone,clientaccountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New clientaccountDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnclientID = MyBase.Columns("clientID")
            Me.columnprofile_picture = MyBase.Columns("profile_picture")
            Me.columnclient_code = MyBase.Columns("client_code")
            Me.columncreated_by = MyBase.Columns("created_by")
            Me.columncreatedDate = MyBase.Columns("createdDate")
            Me.columnspouse = MyBase.Columns("spouse")
            Me.columnarea = MyBase.Columns("area")
            Me.columndescription = MyBase.Columns("description")
            Me.columnlast_name = MyBase.Columns("last_name")
            Me.columnfirst_name = MyBase.Columns("first_name")
            Me.columnmiddle_name = MyBase.Columns("middle_name")
            Me.columngender = MyBase.Columns("gender")
            Me.columnage = MyBase.Columns("age")
            Me.columnbirth_date = MyBase.Columns("birth_date")
            Me.columncivil_status = MyBase.Columns("civil_status")
            Me.columnmobile_no = MyBase.Columns("mobile_no")
            Me.columnemail_add = MyBase.Columns("email_add")
            Me.columnoccupation = MyBase.Columns("occupation")
            Me.columnhome_add = MyBase.Columns("home_add")
            Me.columnzipcode = MyBase.Columns("zipcode")
            Me.columnoffice_add = MyBase.Columns("office_add")
            Me.columntin_no = MyBase.Columns("tin_no")
            Me.columnbank_account_type = MyBase.Columns("bank_account_type")
            Me.columnbank_account_no = MyBase.Columns("bank_account_no")
            Me.columnvalid_id_type = MyBase.Columns("valid_id_type")
            Me.columnvalid_id_no = MyBase.Columns("valid_id_no")
            Me.columnatm_card_type = MyBase.Columns("atm_card_type")
            Me.columnatm_card_no = MyBase.Columns("atm_card_no")
            Me.columncoFullName = MyBase.Columns("coFullName")
            Me.columncoAddress = MyBase.Columns("coAddress")
            Me.columncoNumber = MyBase.Columns("coNumber")
            Me.columncoOccupation = MyBase.Columns("coOccupation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnclientID = New Global.System.Data.DataColumn("clientID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientID)
            Me.columnprofile_picture = New Global.System.Data.DataColumn("profile_picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprofile_picture)
            Me.columnclient_code = New Global.System.Data.DataColumn("client_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclient_code)
            Me.columncreated_by = New Global.System.Data.DataColumn("created_by", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated_by)
            Me.columncreatedDate = New Global.System.Data.DataColumn("createdDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreatedDate)
            Me.columnspouse = New Global.System.Data.DataColumn("spouse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspouse)
            Me.columnarea = New Global.System.Data.DataColumn("area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnarea)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnlast_name = New Global.System.Data.DataColumn("last_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_name)
            Me.columnfirst_name = New Global.System.Data.DataColumn("first_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfirst_name)
            Me.columnmiddle_name = New Global.System.Data.DataColumn("middle_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmiddle_name)
            Me.columngender = New Global.System.Data.DataColumn("gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngender)
            Me.columnage = New Global.System.Data.DataColumn("age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnage)
            Me.columnbirth_date = New Global.System.Data.DataColumn("birth_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbirth_date)
            Me.columncivil_status = New Global.System.Data.DataColumn("civil_status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncivil_status)
            Me.columnmobile_no = New Global.System.Data.DataColumn("mobile_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmobile_no)
            Me.columnemail_add = New Global.System.Data.DataColumn("email_add", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail_add)
            Me.columnoccupation = New Global.System.Data.DataColumn("occupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoccupation)
            Me.columnhome_add = New Global.System.Data.DataColumn("home_add", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhome_add)
            Me.columnzipcode = New Global.System.Data.DataColumn("zipcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzipcode)
            Me.columnoffice_add = New Global.System.Data.DataColumn("office_add", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoffice_add)
            Me.columntin_no = New Global.System.Data.DataColumn("tin_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntin_no)
            Me.columnbank_account_type = New Global.System.Data.DataColumn("bank_account_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbank_account_type)
            Me.columnbank_account_no = New Global.System.Data.DataColumn("bank_account_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbank_account_no)
            Me.columnvalid_id_type = New Global.System.Data.DataColumn("valid_id_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalid_id_type)
            Me.columnvalid_id_no = New Global.System.Data.DataColumn("valid_id_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalid_id_no)
            Me.columnatm_card_type = New Global.System.Data.DataColumn("atm_card_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatm_card_type)
            Me.columnatm_card_no = New Global.System.Data.DataColumn("atm_card_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnatm_card_no)
            Me.columncoFullName = New Global.System.Data.DataColumn("coFullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoFullName)
            Me.columncoAddress = New Global.System.Data.DataColumn("coAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoAddress)
            Me.columncoNumber = New Global.System.Data.DataColumn("coNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoNumber)
            Me.columncoOccupation = New Global.System.Data.DataColumn("coOccupation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoOccupation)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnclientID}, false))
            Me.columnclientID.AutoIncrement = true
            Me.columnclientID.AutoIncrementSeed = -1
            Me.columnclientID.AutoIncrementStep = -1
            Me.columnclientID.Unique = true
            Me.columnclient_code.MaxLength = 200
            Me.columncreated_by.MaxLength = 1020
            Me.columnspouse.AllowDBNull = false
            Me.columnspouse.MaxLength = 400
            Me.columnarea.AllowDBNull = false
            Me.columnarea.MaxLength = 400
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 400
            Me.columnlast_name.MaxLength = 200
            Me.columnfirst_name.MaxLength = 120
            Me.columnmiddle_name.MaxLength = 200
            Me.columngender.MaxLength = 40
            Me.columncivil_status.MaxLength = 200
            Me.columnmobile_no.MaxLength = 60
            Me.columnemail_add.MaxLength = 800
            Me.columnoccupation.MaxLength = 160
            Me.columnhome_add.MaxLength = 800
            Me.columnzipcode.MaxLength = 80
            Me.columnoffice_add.MaxLength = 800
            Me.columntin_no.MaxLength = 1020
            Me.columnbank_account_type.MaxLength = 1020
            Me.columnbank_account_no.MaxLength = 1020
            Me.columnvalid_id_type.MaxLength = 1020
            Me.columnvalid_id_no.MaxLength = 1020
            Me.columnatm_card_type.MaxLength = 1020
            Me.columnatm_card_no.MaxLength = 1020
            Me.columncoFullName.MaxLength = 800
            Me.columncoAddress.MaxLength = 800
            Me.columncoNumber.MaxLength = 800
            Me.columncoOccupation.MaxLength = 800
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewclientaccountRow() As clientaccountRow
            Return CType(Me.NewRow,clientaccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New clientaccountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(clientaccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.clientaccountRowChangedEvent) Is Nothing) Then
                RaiseEvent clientaccountRowChanged(Me, New clientaccountRowChangeEvent(CType(e.Row,clientaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.clientaccountRowChangingEvent) Is Nothing) Then
                RaiseEvent clientaccountRowChanging(Me, New clientaccountRowChangeEvent(CType(e.Row,clientaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.clientaccountRowDeletedEvent) Is Nothing) Then
                RaiseEvent clientaccountRowDeleted(Me, New clientaccountRowChangeEvent(CType(e.Row,clientaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.clientaccountRowDeletingEvent) Is Nothing) Then
                RaiseEvent clientaccountRowDeleting(Me, New clientaccountRowChangeEvent(CType(e.Row,clientaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveclientaccountRow(ByVal row As clientaccountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dtsPayment = New dtsPayment()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "clientaccountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class loanaccountDataTable
        Inherits Global.System.Data.TypedTableBase(Of loanaccountRow)
        
        Private columnloanID As Global.System.Data.DataColumn
        
        Private columnCreatedDate As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnCreatedRole As Global.System.Data.DataColumn
        
        Private columnClientCode As Global.System.Data.DataColumn
        
        Private columnLedgerNo As Global.System.Data.DataColumn
        
        Private columnLDSNo As Global.System.Data.DataColumn
        
        Private columnPrevLDSNo As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnCoMaker As Global.System.Data.DataColumn
        
        Private columnArea As Global.System.Data.DataColumn
        
        Private columnLoanType As Global.System.Data.DataColumn
        
        Private columnChecks As Global.System.Data.DataColumn
        
        Private columnChecksNo As Global.System.Data.DataColumn
        
        Private columnAcctNo As Global.System.Data.DataColumn
        
        Private columnCash As Global.System.Data.DataColumn
        
        Private columnLoanDate As Global.System.Data.DataColumn
        
        Private columnFirstDueDate As Global.System.Data.DataColumn
        
        Private columnMaturityDate As Global.System.Data.DataColumn
        
        Private columnOldBalanceAmount As Global.System.Data.DataColumn
        
        Private columnOldInterestAmount As Global.System.Data.DataColumn
        
        Private columnLoanTrans As Global.System.Data.DataColumn
        
        Private columnTermOfLoan As Global.System.Data.DataColumn
        
        Private columnLoanAmount As Global.System.Data.DataColumn
        
        Private columnInterestRate As Global.System.Data.DataColumn
        
        Private columnPrincipal As Global.System.Data.DataColumn
        
        Private columnInterest As Global.System.Data.DataColumn
        
        Private columnMonthlyAmort As Global.System.Data.DataColumn
        
        Private columnNotarialFee As Global.System.Data.DataColumn
        
        Private columnFinCharge As Global.System.Data.DataColumn
        
        Private columnAccomodation As Global.System.Data.DataColumn
        
        Private columnInspection As Global.System.Data.DataColumn
        
        Private columnLPPP As Global.System.Data.DataColumn
        
        Private columnNewBalance As Global.System.Data.DataColumn
        
        Private columnNetProceeds As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "loanaccount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property loanIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnloanID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CreatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CreatedRoleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedRole
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClientCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LedgerNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLedgerNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LDSNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLDSNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PrevLDSNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevLDSNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CoMakerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCoMaker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LoanTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ChecksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChecks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ChecksNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChecksNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AcctNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcctNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CashColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCash
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LoanDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FirstDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MaturityDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaturityDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property OldBalanceAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldBalanceAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property OldInterestAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldInterestAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LoanTransColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanTrans
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TermOfLoanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTermOfLoan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LoanAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property InterestRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property InterestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MonthlyAmortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonthlyAmort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NotarialFeeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotarialFee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FinChargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinCharge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property AccomodationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccomodation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property InspectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LPPPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPPP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NewBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property NetProceedsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetProceeds
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As loanaccountRow
            Get
                Return CType(Me.Rows(index),loanaccountRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event loanaccountRowChanging As loanaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event loanaccountRowChanged As loanaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event loanaccountRowDeleting As loanaccountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event loanaccountRowDeleted As loanaccountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddloanaccountRow(ByVal row As loanaccountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddloanaccountRow( _
                    ByVal CreatedDate As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedRole As String,  _
                    ByVal parentpaymentledgerRowBypaymentledger_loanaccount As paymentledgerRow,  _
                    ByVal LedgerNo As String,  _
                    ByVal LDSNo As String,  _
                    ByVal PrevLDSNo As String,  _
                    ByVal ClientName As String,  _
                    ByVal CoMaker As String,  _
                    ByVal Area As String,  _
                    ByVal LoanType As String,  _
                    ByVal Checks As String,  _
                    ByVal ChecksNo As String,  _
                    ByVal AcctNo As String,  _
                    ByVal Cash As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal FirstDueDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal OldBalanceAmount As String,  _
                    ByVal OldInterestAmount As String,  _
                    ByVal LoanTrans As String,  _
                    ByVal TermOfLoan As String,  _
                    ByVal LoanAmount As String,  _
                    ByVal InterestRate As String,  _
                    ByVal Principal As String,  _
                    ByVal Interest As String,  _
                    ByVal MonthlyAmort As String,  _
                    ByVal NotarialFee As String,  _
                    ByVal FinCharge As String,  _
                    ByVal Accomodation As String,  _
                    ByVal Inspection As String,  _
                    ByVal LPPP As String,  _
                    ByVal NewBalance As String,  _
                    ByVal NetProceeds As String) As loanaccountRow
            Dim rowloanaccountRow As loanaccountRow = CType(Me.NewRow,loanaccountRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CreatedDate, CreatedBy, CreatedRole, Nothing, LedgerNo, LDSNo, PrevLDSNo, ClientName, CoMaker, Area, LoanType, Checks, ChecksNo, AcctNo, Cash, LoanDate, FirstDueDate, MaturityDate, OldBalanceAmount, OldInterestAmount, LoanTrans, TermOfLoan, LoanAmount, InterestRate, Principal, Interest, MonthlyAmort, NotarialFee, FinCharge, Accomodation, Inspection, LPPP, NewBalance, NetProceeds}
            If (Not (parentpaymentledgerRowBypaymentledger_loanaccount) Is Nothing) Then
                columnValuesArray(4) = parentpaymentledgerRowBypaymentledger_loanaccount(7)
            End If
            rowloanaccountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowloanaccountRow)
            Return rowloanaccountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As loanaccountDataTable = CType(MyBase.Clone,loanaccountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New loanaccountDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnloanID = MyBase.Columns("loanID")
            Me.columnCreatedDate = MyBase.Columns("CreatedDate")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnCreatedRole = MyBase.Columns("CreatedRole")
            Me.columnClientCode = MyBase.Columns("ClientCode")
            Me.columnLedgerNo = MyBase.Columns("LedgerNo")
            Me.columnLDSNo = MyBase.Columns("LDSNo")
            Me.columnPrevLDSNo = MyBase.Columns("PrevLDSNo")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnCoMaker = MyBase.Columns("CoMaker")
            Me.columnArea = MyBase.Columns("Area")
            Me.columnLoanType = MyBase.Columns("LoanType")
            Me.columnChecks = MyBase.Columns("Checks")
            Me.columnChecksNo = MyBase.Columns("ChecksNo")
            Me.columnAcctNo = MyBase.Columns("AcctNo")
            Me.columnCash = MyBase.Columns("Cash")
            Me.columnLoanDate = MyBase.Columns("LoanDate")
            Me.columnFirstDueDate = MyBase.Columns("FirstDueDate")
            Me.columnMaturityDate = MyBase.Columns("MaturityDate")
            Me.columnOldBalanceAmount = MyBase.Columns("OldBalanceAmount")
            Me.columnOldInterestAmount = MyBase.Columns("OldInterestAmount")
            Me.columnLoanTrans = MyBase.Columns("LoanTrans")
            Me.columnTermOfLoan = MyBase.Columns("TermOfLoan")
            Me.columnLoanAmount = MyBase.Columns("LoanAmount")
            Me.columnInterestRate = MyBase.Columns("InterestRate")
            Me.columnPrincipal = MyBase.Columns("Principal")
            Me.columnInterest = MyBase.Columns("Interest")
            Me.columnMonthlyAmort = MyBase.Columns("MonthlyAmort")
            Me.columnNotarialFee = MyBase.Columns("NotarialFee")
            Me.columnFinCharge = MyBase.Columns("FinCharge")
            Me.columnAccomodation = MyBase.Columns("Accomodation")
            Me.columnInspection = MyBase.Columns("Inspection")
            Me.columnLPPP = MyBase.Columns("LPPP")
            Me.columnNewBalance = MyBase.Columns("NewBalance")
            Me.columnNetProceeds = MyBase.Columns("NetProceeds")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnloanID = New Global.System.Data.DataColumn("loanID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnloanID)
            Me.columnCreatedDate = New Global.System.Data.DataColumn("CreatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDate)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnCreatedRole = New Global.System.Data.DataColumn("CreatedRole", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedRole)
            Me.columnClientCode = New Global.System.Data.DataColumn("ClientCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientCode)
            Me.columnLedgerNo = New Global.System.Data.DataColumn("LedgerNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLedgerNo)
            Me.columnLDSNo = New Global.System.Data.DataColumn("LDSNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLDSNo)
            Me.columnPrevLDSNo = New Global.System.Data.DataColumn("PrevLDSNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevLDSNo)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnCoMaker = New Global.System.Data.DataColumn("CoMaker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoMaker)
            Me.columnArea = New Global.System.Data.DataColumn("Area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArea)
            Me.columnLoanType = New Global.System.Data.DataColumn("LoanType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanType)
            Me.columnChecks = New Global.System.Data.DataColumn("Checks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChecks)
            Me.columnChecksNo = New Global.System.Data.DataColumn("ChecksNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChecksNo)
            Me.columnAcctNo = New Global.System.Data.DataColumn("AcctNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcctNo)
            Me.columnCash = New Global.System.Data.DataColumn("Cash", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCash)
            Me.columnLoanDate = New Global.System.Data.DataColumn("LoanDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanDate)
            Me.columnFirstDueDate = New Global.System.Data.DataColumn("FirstDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstDueDate)
            Me.columnMaturityDate = New Global.System.Data.DataColumn("MaturityDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaturityDate)
            Me.columnOldBalanceAmount = New Global.System.Data.DataColumn("OldBalanceAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldBalanceAmount)
            Me.columnOldInterestAmount = New Global.System.Data.DataColumn("OldInterestAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldInterestAmount)
            Me.columnLoanTrans = New Global.System.Data.DataColumn("LoanTrans", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanTrans)
            Me.columnTermOfLoan = New Global.System.Data.DataColumn("TermOfLoan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTermOfLoan)
            Me.columnLoanAmount = New Global.System.Data.DataColumn("LoanAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanAmount)
            Me.columnInterestRate = New Global.System.Data.DataColumn("InterestRate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestRate)
            Me.columnPrincipal = New Global.System.Data.DataColumn("Principal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipal)
            Me.columnInterest = New Global.System.Data.DataColumn("Interest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterest)
            Me.columnMonthlyAmort = New Global.System.Data.DataColumn("MonthlyAmort", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonthlyAmort)
            Me.columnNotarialFee = New Global.System.Data.DataColumn("NotarialFee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotarialFee)
            Me.columnFinCharge = New Global.System.Data.DataColumn("FinCharge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinCharge)
            Me.columnAccomodation = New Global.System.Data.DataColumn("Accomodation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccomodation)
            Me.columnInspection = New Global.System.Data.DataColumn("Inspection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspection)
            Me.columnLPPP = New Global.System.Data.DataColumn("LPPP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPPP)
            Me.columnNewBalance = New Global.System.Data.DataColumn("NewBalance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewBalance)
            Me.columnNetProceeds = New Global.System.Data.DataColumn("NetProceeds", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetProceeds)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnloanID}, false))
            Me.columnloanID.AutoIncrement = true
            Me.columnloanID.AutoIncrementSeed = -1
            Me.columnloanID.AutoIncrementStep = -1
            Me.columnloanID.Unique = true
            Me.columnCreatedDate.AllowDBNull = false
            Me.columnCreatedBy.AllowDBNull = false
            Me.columnCreatedBy.MaxLength = 400
            Me.columnCreatedRole.AllowDBNull = false
            Me.columnCreatedRole.MaxLength = 400
            Me.columnClientCode.AllowDBNull = false
            Me.columnClientCode.MaxLength = 400
            Me.columnLedgerNo.AllowDBNull = false
            Me.columnLedgerNo.MaxLength = 400
            Me.columnLDSNo.AllowDBNull = false
            Me.columnLDSNo.MaxLength = 400
            Me.columnPrevLDSNo.AllowDBNull = false
            Me.columnPrevLDSNo.MaxLength = 400
            Me.columnClientName.AllowDBNull = false
            Me.columnClientName.MaxLength = 400
            Me.columnCoMaker.AllowDBNull = false
            Me.columnCoMaker.MaxLength = 400
            Me.columnArea.AllowDBNull = false
            Me.columnArea.MaxLength = 400
            Me.columnLoanType.AllowDBNull = false
            Me.columnLoanType.MaxLength = 200
            Me.columnChecks.AllowDBNull = false
            Me.columnChecks.MaxLength = 400
            Me.columnChecksNo.AllowDBNull = false
            Me.columnChecksNo.MaxLength = 400
            Me.columnAcctNo.AllowDBNull = false
            Me.columnAcctNo.MaxLength = 400
            Me.columnCash.AllowDBNull = false
            Me.columnCash.MaxLength = 400
            Me.columnLoanDate.AllowDBNull = false
            Me.columnFirstDueDate.AllowDBNull = false
            Me.columnMaturityDate.AllowDBNull = false
            Me.columnOldBalanceAmount.AllowDBNull = false
            Me.columnOldBalanceAmount.MaxLength = 400
            Me.columnOldInterestAmount.AllowDBNull = false
            Me.columnOldInterestAmount.MaxLength = 400
            Me.columnLoanTrans.AllowDBNull = false
            Me.columnLoanTrans.MaxLength = 400
            Me.columnTermOfLoan.AllowDBNull = false
            Me.columnTermOfLoan.MaxLength = 400
            Me.columnLoanAmount.AllowDBNull = false
            Me.columnLoanAmount.MaxLength = 400
            Me.columnInterestRate.AllowDBNull = false
            Me.columnInterestRate.MaxLength = 400
            Me.columnPrincipal.AllowDBNull = false
            Me.columnPrincipal.MaxLength = 400
            Me.columnInterest.AllowDBNull = false
            Me.columnInterest.MaxLength = 400
            Me.columnMonthlyAmort.AllowDBNull = false
            Me.columnMonthlyAmort.MaxLength = 400
            Me.columnNotarialFee.AllowDBNull = false
            Me.columnNotarialFee.MaxLength = 400
            Me.columnFinCharge.AllowDBNull = false
            Me.columnFinCharge.MaxLength = 400
            Me.columnAccomodation.AllowDBNull = false
            Me.columnAccomodation.MaxLength = 400
            Me.columnInspection.AllowDBNull = false
            Me.columnInspection.MaxLength = 400
            Me.columnLPPP.AllowDBNull = false
            Me.columnLPPP.MaxLength = 400
            Me.columnNewBalance.AllowDBNull = false
            Me.columnNewBalance.MaxLength = 400
            Me.columnNetProceeds.AllowDBNull = false
            Me.columnNetProceeds.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewloanaccountRow() As loanaccountRow
            Return CType(Me.NewRow,loanaccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New loanaccountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(loanaccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.loanaccountRowChangedEvent) Is Nothing) Then
                RaiseEvent loanaccountRowChanged(Me, New loanaccountRowChangeEvent(CType(e.Row,loanaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.loanaccountRowChangingEvent) Is Nothing) Then
                RaiseEvent loanaccountRowChanging(Me, New loanaccountRowChangeEvent(CType(e.Row,loanaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.loanaccountRowDeletedEvent) Is Nothing) Then
                RaiseEvent loanaccountRowDeleted(Me, New loanaccountRowChangeEvent(CType(e.Row,loanaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.loanaccountRowDeletingEvent) Is Nothing) Then
                RaiseEvent loanaccountRowDeleting(Me, New loanaccountRowChangeEvent(CType(e.Row,loanaccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveloanaccountRow(ByVal row As loanaccountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dtsPayment = New dtsPayment()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "loanaccountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class paymentledgerDataTable
        Inherits Global.System.Data.TypedTableBase(Of paymentledgerRow)
        
        Private columnldgID As Global.System.Data.DataColumn
        
        Private columnProcessBy As Global.System.Data.DataColumn
        
        Private columnPaymode As Global.System.Data.DataColumn
        
        Private columnDepBank As Global.System.Data.DataColumn
        
        Private columnCHKNo As Global.System.Data.DataColumn
        
        Private columnCHKAmount As Global.System.Data.DataColumn
        
        Private columnRefund As Global.System.Data.DataColumn
        
        Private columnCustomerCode As Global.System.Data.DataColumn
        
        Private columnLGNo As Global.System.Data.DataColumn
        
        Private columnReceiptNo As Global.System.Data.DataColumn
        
        Private columnPayDate As Global.System.Data.DataColumn
        
        Private columnPrinAmount As Global.System.Data.DataColumn
        
        Private columnPrinPayment As Global.System.Data.DataColumn
        
        Private columnPrinBalance As Global.System.Data.DataColumn
        
        Private columnInterestAmount As Global.System.Data.DataColumn
        
        Private columnInterestPayment As Global.System.Data.DataColumn
        
        Private columnTotalPayable As Global.System.Data.DataColumn
        
        Private columnPenalty As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "paymentledger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ldgIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldgID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ProcessByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PaymodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaymode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property DepBankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepBank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CHKNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CHKAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property RefundColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRefund
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property CustomerCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property LGNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLGNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ReceiptNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReceiptNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PayDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PrinAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PrinPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PrinBalanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrinBalance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property InterestAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property InterestPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInterestPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property TotalPayableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPayable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PenaltyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPenalty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As paymentledgerRow
            Get
                Return CType(Me.Rows(index),paymentledgerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event paymentledgerRowChanging As paymentledgerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event paymentledgerRowChanged As paymentledgerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event paymentledgerRowDeleting As paymentledgerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event paymentledgerRowDeleted As paymentledgerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddpaymentledgerRow(ByVal row As paymentledgerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddpaymentledgerRow( _
                    ByVal ProcessBy As String,  _
                    ByVal Paymode As String,  _
                    ByVal DepBank As String,  _
                    ByVal CHKNo As String,  _
                    ByVal CHKAmount As String,  _
                    ByVal Refund As String,  _
                    ByVal CustomerCode As String,  _
                    ByVal LGNo As String,  _
                    ByVal ReceiptNo As String,  _
                    ByVal PayDate As Date,  _
                    ByVal PrinAmount As String,  _
                    ByVal PrinPayment As String,  _
                    ByVal PrinBalance As String,  _
                    ByVal InterestAmount As String,  _
                    ByVal InterestPayment As String,  _
                    ByVal TotalPayable As String,  _
                    ByVal Penalty As String,  _
                    ByVal Status As String) As paymentledgerRow
            Dim rowpaymentledgerRow As paymentledgerRow = CType(Me.NewRow,paymentledgerRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ProcessBy, Paymode, DepBank, CHKNo, CHKAmount, Refund, CustomerCode, LGNo, ReceiptNo, PayDate, PrinAmount, PrinPayment, PrinBalance, InterestAmount, InterestPayment, TotalPayable, Penalty, Status}
            rowpaymentledgerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpaymentledgerRow)
            Return rowpaymentledgerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As paymentledgerDataTable = CType(MyBase.Clone,paymentledgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New paymentledgerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnldgID = MyBase.Columns("ldgID")
            Me.columnProcessBy = MyBase.Columns("ProcessBy")
            Me.columnPaymode = MyBase.Columns("Paymode")
            Me.columnDepBank = MyBase.Columns("DepBank")
            Me.columnCHKNo = MyBase.Columns("CHKNo")
            Me.columnCHKAmount = MyBase.Columns("CHKAmount")
            Me.columnRefund = MyBase.Columns("Refund")
            Me.columnCustomerCode = MyBase.Columns("CustomerCode")
            Me.columnLGNo = MyBase.Columns("LGNo")
            Me.columnReceiptNo = MyBase.Columns("ReceiptNo")
            Me.columnPayDate = MyBase.Columns("PayDate")
            Me.columnPrinAmount = MyBase.Columns("PrinAmount")
            Me.columnPrinPayment = MyBase.Columns("PrinPayment")
            Me.columnPrinBalance = MyBase.Columns("PrinBalance")
            Me.columnInterestAmount = MyBase.Columns("InterestAmount")
            Me.columnInterestPayment = MyBase.Columns("InterestPayment")
            Me.columnTotalPayable = MyBase.Columns("TotalPayable")
            Me.columnPenalty = MyBase.Columns("Penalty")
            Me.columnStatus = MyBase.Columns("Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnldgID = New Global.System.Data.DataColumn("ldgID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldgID)
            Me.columnProcessBy = New Global.System.Data.DataColumn("ProcessBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessBy)
            Me.columnPaymode = New Global.System.Data.DataColumn("Paymode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaymode)
            Me.columnDepBank = New Global.System.Data.DataColumn("DepBank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepBank)
            Me.columnCHKNo = New Global.System.Data.DataColumn("CHKNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKNo)
            Me.columnCHKAmount = New Global.System.Data.DataColumn("CHKAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKAmount)
            Me.columnRefund = New Global.System.Data.DataColumn("Refund", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRefund)
            Me.columnCustomerCode = New Global.System.Data.DataColumn("CustomerCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerCode)
            Me.columnLGNo = New Global.System.Data.DataColumn("LGNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLGNo)
            Me.columnReceiptNo = New Global.System.Data.DataColumn("ReceiptNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReceiptNo)
            Me.columnPayDate = New Global.System.Data.DataColumn("PayDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayDate)
            Me.columnPrinAmount = New Global.System.Data.DataColumn("PrinAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinAmount)
            Me.columnPrinPayment = New Global.System.Data.DataColumn("PrinPayment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinPayment)
            Me.columnPrinBalance = New Global.System.Data.DataColumn("PrinBalance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrinBalance)
            Me.columnInterestAmount = New Global.System.Data.DataColumn("InterestAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestAmount)
            Me.columnInterestPayment = New Global.System.Data.DataColumn("InterestPayment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInterestPayment)
            Me.columnTotalPayable = New Global.System.Data.DataColumn("TotalPayable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPayable)
            Me.columnPenalty = New Global.System.Data.DataColumn("Penalty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPenalty)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnldgID}, false))
            Me.columnldgID.AutoIncrement = true
            Me.columnldgID.AutoIncrementSeed = -1
            Me.columnldgID.AutoIncrementStep = -1
            Me.columnldgID.Unique = true
            Me.columnProcessBy.AllowDBNull = false
            Me.columnProcessBy.MaxLength = 400
            Me.columnPaymode.MaxLength = 400
            Me.columnDepBank.MaxLength = 400
            Me.columnCHKNo.MaxLength = 400
            Me.columnCHKAmount.MaxLength = 400
            Me.columnRefund.MaxLength = 400
            Me.columnCustomerCode.AllowDBNull = false
            Me.columnCustomerCode.MaxLength = 400
            Me.columnLGNo.AllowDBNull = false
            Me.columnLGNo.MaxLength = 400
            Me.columnReceiptNo.MaxLength = 200
            Me.columnPrinAmount.MaxLength = 400
            Me.columnPrinPayment.MaxLength = 400
            Me.columnPrinBalance.MaxLength = 400
            Me.columnInterestAmount.MaxLength = 400
            Me.columnInterestPayment.MaxLength = 400
            Me.columnTotalPayable.MaxLength = 44
            Me.columnPenalty.MaxLength = 400
            Me.columnStatus.MaxLength = 400
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewpaymentledgerRow() As paymentledgerRow
            Return CType(Me.NewRow,paymentledgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New paymentledgerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(paymentledgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.paymentledgerRowChangedEvent) Is Nothing) Then
                RaiseEvent paymentledgerRowChanged(Me, New paymentledgerRowChangeEvent(CType(e.Row,paymentledgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.paymentledgerRowChangingEvent) Is Nothing) Then
                RaiseEvent paymentledgerRowChanging(Me, New paymentledgerRowChangeEvent(CType(e.Row,paymentledgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.paymentledgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent paymentledgerRowDeleted(Me, New paymentledgerRowChangeEvent(CType(e.Row,paymentledgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.paymentledgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent paymentledgerRowDeleting(Me, New paymentledgerRowChangeEvent(CType(e.Row,paymentledgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemovepaymentledgerRow(ByVal row As paymentledgerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dtsPayment = New dtsPayment()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "paymentledgerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class clientaccountRow
        Inherits Global.System.Data.DataRow
        
        Private tableclientaccount As clientaccountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableclientaccount = CType(Me.Table,clientaccountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property clientID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.clientIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'clientID' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.clientIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property profile_picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.profile_pictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'profile_picture' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.profile_pictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property client_code() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.client_codeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'client_code' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.client_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property created_by() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.created_byColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'created_by' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.created_byColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property createdDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.createdDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'createdDate' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.createdDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property spouse() As String
            Get
                Return CType(Me(Me.tableclientaccount.spouseColumn),String)
            End Get
            Set
                Me(Me.tableclientaccount.spouseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property area() As String
            Get
                Return CType(Me(Me.tableclientaccount.areaColumn),String)
            End Get
            Set
                Me(Me.tableclientaccount.areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tableclientaccount.descriptionColumn),String)
            End Get
            Set
                Me(Me.tableclientaccount.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property last_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.last_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'last_name' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.last_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property first_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.first_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'first_name' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.first_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property middle_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.middle_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'middle_name' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.middle_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.genderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'gender' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.genderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.ageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'age' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.ageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property birth_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.birth_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'birth_date' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.birth_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property civil_status() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.civil_statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'civil_status' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.civil_statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property mobile_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.mobile_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mobile_no' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.mobile_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property email_add() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.email_addColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email_add' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.email_addColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property occupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.occupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'occupation' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.occupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property home_add() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.home_addColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'home_add' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.home_addColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property zipcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.zipcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'zipcode' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.zipcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property office_add() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.office_addColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'office_add' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.office_addColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property tin_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.tin_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tin_no' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.tin_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property bank_account_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.bank_account_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bank_account_type' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.bank_account_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property bank_account_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.bank_account_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bank_account_no' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.bank_account_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property valid_id_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.valid_id_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'valid_id_type' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.valid_id_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property valid_id_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.valid_id_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'valid_id_no' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.valid_id_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property atm_card_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.atm_card_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'atm_card_type' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.atm_card_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property atm_card_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.atm_card_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'atm_card_no' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.atm_card_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property coFullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.coFullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'coFullName' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.coFullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property coAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.coAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'coAddress' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.coAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property coNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.coNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'coNumber' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.coNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property coOccupation() As String
            Get
                Try 
                    Return CType(Me(Me.tableclientaccount.coOccupationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'coOccupation' in table 'clientaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclientaccount.coOccupationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property paymentledgerRow() As paymentledgerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("paymentledger_clientaccount")),paymentledgerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("paymentledger_clientaccount"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsclientIDNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.clientIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetclientIDNull()
            Me(Me.tableclientaccount.clientIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isprofile_pictureNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.profile_pictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setprofile_pictureNull()
            Me(Me.tableclientaccount.profile_pictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isclient_codeNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.client_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setclient_codeNull()
            Me(Me.tableclientaccount.client_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Iscreated_byNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.created_byColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setcreated_byNull()
            Me(Me.tableclientaccount.created_byColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscreatedDateNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.createdDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcreatedDateNull()
            Me(Me.tableclientaccount.createdDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Islast_nameNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.last_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setlast_nameNull()
            Me(Me.tableclientaccount.last_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isfirst_nameNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.first_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setfirst_nameNull()
            Me(Me.tableclientaccount.first_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Ismiddle_nameNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.middle_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setmiddle_nameNull()
            Me(Me.tableclientaccount.middle_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsgenderNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.genderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetgenderNull()
            Me(Me.tableclientaccount.genderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsageNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.ageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetageNull()
            Me(Me.tableclientaccount.ageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isbirth_dateNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.birth_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setbirth_dateNull()
            Me(Me.tableclientaccount.birth_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Iscivil_statusNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.civil_statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setcivil_statusNull()
            Me(Me.tableclientaccount.civil_statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Ismobile_noNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.mobile_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setmobile_noNull()
            Me(Me.tableclientaccount.mobile_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isemail_addNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.email_addColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setemail_addNull()
            Me(Me.tableclientaccount.email_addColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsoccupationNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.occupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetoccupationNull()
            Me(Me.tableclientaccount.occupationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Ishome_addNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.home_addColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Sethome_addNull()
            Me(Me.tableclientaccount.home_addColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IszipcodeNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.zipcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetzipcodeNull()
            Me(Me.tableclientaccount.zipcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isoffice_addNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.office_addColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setoffice_addNull()
            Me(Me.tableclientaccount.office_addColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Istin_noNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.tin_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Settin_noNull()
            Me(Me.tableclientaccount.tin_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isbank_account_typeNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.bank_account_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setbank_account_typeNull()
            Me(Me.tableclientaccount.bank_account_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isbank_account_noNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.bank_account_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setbank_account_noNull()
            Me(Me.tableclientaccount.bank_account_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isvalid_id_typeNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.valid_id_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setvalid_id_typeNull()
            Me(Me.tableclientaccount.valid_id_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isvalid_id_noNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.valid_id_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setvalid_id_noNull()
            Me(Me.tableclientaccount.valid_id_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isatm_card_typeNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.atm_card_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setatm_card_typeNull()
            Me(Me.tableclientaccount.atm_card_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isatm_card_noNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.atm_card_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setatm_card_noNull()
            Me(Me.tableclientaccount.atm_card_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscoFullNameNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.coFullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcoFullNameNull()
            Me(Me.tableclientaccount.coFullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscoAddressNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.coAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcoAddressNull()
            Me(Me.tableclientaccount.coAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscoNumberNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.coNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcoNumberNull()
            Me(Me.tableclientaccount.coNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IscoOccupationNull() As Boolean
            Return Me.IsNull(Me.tableclientaccount.coOccupationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetcoOccupationNull()
            Me(Me.tableclientaccount.coOccupationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class loanaccountRow
        Inherits Global.System.Data.DataRow
        
        Private tableloanaccount As loanaccountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableloanaccount = CType(Me.Table,loanaccountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property loanID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableloanaccount.loanIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'loanID' in table 'loanaccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableloanaccount.loanIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CreatedDate() As Date
            Get
                Return CType(Me(Me.tableloanaccount.CreatedDateColumn),Date)
            End Get
            Set
                Me(Me.tableloanaccount.CreatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CreatedBy() As String
            Get
                Return CType(Me(Me.tableloanaccount.CreatedByColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CreatedRole() As String
            Get
                Return CType(Me(Me.tableloanaccount.CreatedRoleColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.CreatedRoleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClientCode() As String
            Get
                Return CType(Me(Me.tableloanaccount.ClientCodeColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.ClientCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LedgerNo() As String
            Get
                Return CType(Me(Me.tableloanaccount.LedgerNoColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LedgerNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LDSNo() As String
            Get
                Return CType(Me(Me.tableloanaccount.LDSNoColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LDSNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PrevLDSNo() As String
            Get
                Return CType(Me(Me.tableloanaccount.PrevLDSNoColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.PrevLDSNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClientName() As String
            Get
                Return CType(Me(Me.tableloanaccount.ClientNameColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CoMaker() As String
            Get
                Return CType(Me(Me.tableloanaccount.CoMakerColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.CoMakerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Area() As String
            Get
                Return CType(Me(Me.tableloanaccount.AreaColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.AreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LoanType() As String
            Get
                Return CType(Me(Me.tableloanaccount.LoanTypeColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LoanTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Checks() As String
            Get
                Return CType(Me(Me.tableloanaccount.ChecksColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.ChecksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ChecksNo() As String
            Get
                Return CType(Me(Me.tableloanaccount.ChecksNoColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.ChecksNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property AcctNo() As String
            Get
                Return CType(Me(Me.tableloanaccount.AcctNoColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.AcctNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Cash() As String
            Get
                Return CType(Me(Me.tableloanaccount.CashColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.CashColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LoanDate() As Date
            Get
                Return CType(Me(Me.tableloanaccount.LoanDateColumn),Date)
            End Get
            Set
                Me(Me.tableloanaccount.LoanDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FirstDueDate() As Date
            Get
                Return CType(Me(Me.tableloanaccount.FirstDueDateColumn),Date)
            End Get
            Set
                Me(Me.tableloanaccount.FirstDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MaturityDate() As Date
            Get
                Return CType(Me(Me.tableloanaccount.MaturityDateColumn),Date)
            End Get
            Set
                Me(Me.tableloanaccount.MaturityDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property OldBalanceAmount() As String
            Get
                Return CType(Me(Me.tableloanaccount.OldBalanceAmountColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.OldBalanceAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property OldInterestAmount() As String
            Get
                Return CType(Me(Me.tableloanaccount.OldInterestAmountColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.OldInterestAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LoanTrans() As String
            Get
                Return CType(Me(Me.tableloanaccount.LoanTransColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LoanTransColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TermOfLoan() As String
            Get
                Return CType(Me(Me.tableloanaccount.TermOfLoanColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.TermOfLoanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LoanAmount() As String
            Get
                Return CType(Me(Me.tableloanaccount.LoanAmountColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LoanAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property InterestRate() As String
            Get
                Return CType(Me(Me.tableloanaccount.InterestRateColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.InterestRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Principal() As String
            Get
                Return CType(Me(Me.tableloanaccount.PrincipalColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.PrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Interest() As String
            Get
                Return CType(Me(Me.tableloanaccount.InterestColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.InterestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property MonthlyAmort() As String
            Get
                Return CType(Me(Me.tableloanaccount.MonthlyAmortColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.MonthlyAmortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NotarialFee() As String
            Get
                Return CType(Me(Me.tableloanaccount.NotarialFeeColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.NotarialFeeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FinCharge() As String
            Get
                Return CType(Me(Me.tableloanaccount.FinChargeColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.FinChargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Accomodation() As String
            Get
                Return CType(Me(Me.tableloanaccount.AccomodationColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.AccomodationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Inspection() As String
            Get
                Return CType(Me(Me.tableloanaccount.InspectionColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.InspectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LPPP() As String
            Get
                Return CType(Me(Me.tableloanaccount.LPPPColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.LPPPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NewBalance() As String
            Get
                Return CType(Me(Me.tableloanaccount.NewBalanceColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.NewBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NetProceeds() As String
            Get
                Return CType(Me(Me.tableloanaccount.NetProceedsColumn),String)
            End Get
            Set
                Me(Me.tableloanaccount.NetProceedsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property paymentledgerRow() As paymentledgerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("paymentledger_loanaccount")),paymentledgerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("paymentledger_loanaccount"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsloanIDNull() As Boolean
            Return Me.IsNull(Me.tableloanaccount.loanIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetloanIDNull()
            Me(Me.tableloanaccount.loanIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class paymentledgerRow
        Inherits Global.System.Data.DataRow
        
        Private tablepaymentledger As paymentledgerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepaymentledger = CType(Me.Table,paymentledgerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ldgID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.ldgIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ldgID' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.ldgIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ProcessBy() As String
            Get
                Return CType(Me(Me.tablepaymentledger.ProcessByColumn),String)
            End Get
            Set
                Me(Me.tablepaymentledger.ProcessByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Paymode() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PaymodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paymode' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PaymodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property DepBank() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.DepBankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepBank' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.DepBankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CHKNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.CHKNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKNo' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.CHKNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CHKAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.CHKAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKAmount' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.CHKAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Refund() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.RefundColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Refund' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.RefundColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CustomerCode() As String
            Get
                Return CType(Me(Me.tablepaymentledger.CustomerCodeColumn),String)
            End Get
            Set
                Me(Me.tablepaymentledger.CustomerCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LGNo() As String
            Get
                Return CType(Me(Me.tablepaymentledger.LGNoColumn),String)
            End Get
            Set
                Me(Me.tablepaymentledger.LGNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ReceiptNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.ReceiptNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReceiptNo' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.ReceiptNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PayDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PayDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayDate' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PayDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PrinAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PrinAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrinAmount' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PrinAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PrinPayment() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PrinPaymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrinPayment' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PrinPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property PrinBalance() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PrinBalanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrinBalance' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PrinBalanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property InterestAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.InterestAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestAmount' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.InterestAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property InterestPayment() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.InterestPaymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InterestPayment' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.InterestPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TotalPayable() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.TotalPayableColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalPayable' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.TotalPayableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Penalty() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.PenaltyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Penalty' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.PenaltyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tablepaymentledger.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'paymentledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepaymentledger.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsldgIDNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.ldgIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetldgIDNull()
            Me(Me.tablepaymentledger.ldgIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPaymodeNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PaymodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPaymodeNull()
            Me(Me.tablepaymentledger.PaymodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsDepBankNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.DepBankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetDepBankNull()
            Me(Me.tablepaymentledger.DepBankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCHKNoNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.CHKNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCHKNoNull()
            Me(Me.tablepaymentledger.CHKNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsCHKAmountNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.CHKAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetCHKAmountNull()
            Me(Me.tablepaymentledger.CHKAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsRefundNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.RefundColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetRefundNull()
            Me(Me.tablepaymentledger.RefundColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsReceiptNoNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.ReceiptNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetReceiptNoNull()
            Me(Me.tablepaymentledger.ReceiptNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPayDateNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PayDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPayDateNull()
            Me(Me.tablepaymentledger.PayDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPrinAmountNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PrinAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPrinAmountNull()
            Me(Me.tablepaymentledger.PrinAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPrinPaymentNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PrinPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPrinPaymentNull()
            Me(Me.tablepaymentledger.PrinPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPrinBalanceNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PrinBalanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPrinBalanceNull()
            Me(Me.tablepaymentledger.PrinBalanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsInterestAmountNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.InterestAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetInterestAmountNull()
            Me(Me.tablepaymentledger.InterestAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsInterestPaymentNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.InterestPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetInterestPaymentNull()
            Me(Me.tablepaymentledger.InterestPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsTotalPayableNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.TotalPayableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetTotalPayableNull()
            Me(Me.tablepaymentledger.TotalPayableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsPenaltyNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.PenaltyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetPenaltyNull()
            Me(Me.tablepaymentledger.PenaltyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tablepaymentledger.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetStatusNull()
            Me(Me.tablepaymentledger.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetclientaccountRows() As clientaccountRow()
            If (Me.Table.ChildRelations("paymentledger_clientaccount") Is Nothing) Then
                Return New clientaccountRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("paymentledger_clientaccount")),clientaccountRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetloanaccountRows() As loanaccountRow()
            If (Me.Table.ChildRelations("paymentledger_loanaccount") Is Nothing) Then
                Return New loanaccountRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("paymentledger_loanaccount")),loanaccountRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class clientaccountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As clientaccountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As clientaccountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As clientaccountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class loanaccountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As loanaccountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As loanaccountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As loanaccountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class paymentledgerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As paymentledgerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As paymentledgerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As paymentledgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtsPaymentTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class clientaccountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "clientaccount"
            tableMapping.ColumnMappings.Add("clientID", "clientID")
            tableMapping.ColumnMappings.Add("profile_picture", "profile_picture")
            tableMapping.ColumnMappings.Add("client_code", "client_code")
            tableMapping.ColumnMappings.Add("created_by", "created_by")
            tableMapping.ColumnMappings.Add("createdDate", "createdDate")
            tableMapping.ColumnMappings.Add("spouse", "spouse")
            tableMapping.ColumnMappings.Add("area", "area")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("last_name", "last_name")
            tableMapping.ColumnMappings.Add("first_name", "first_name")
            tableMapping.ColumnMappings.Add("middle_name", "middle_name")
            tableMapping.ColumnMappings.Add("gender", "gender")
            tableMapping.ColumnMappings.Add("age", "age")
            tableMapping.ColumnMappings.Add("birth_date", "birth_date")
            tableMapping.ColumnMappings.Add("civil_status", "civil_status")
            tableMapping.ColumnMappings.Add("mobile_no", "mobile_no")
            tableMapping.ColumnMappings.Add("email_add", "email_add")
            tableMapping.ColumnMappings.Add("occupation", "occupation")
            tableMapping.ColumnMappings.Add("home_add", "home_add")
            tableMapping.ColumnMappings.Add("zipcode", "zipcode")
            tableMapping.ColumnMappings.Add("office_add", "office_add")
            tableMapping.ColumnMappings.Add("tin_no", "tin_no")
            tableMapping.ColumnMappings.Add("bank_account_type", "bank_account_type")
            tableMapping.ColumnMappings.Add("bank_account_no", "bank_account_no")
            tableMapping.ColumnMappings.Add("valid_id_type", "valid_id_type")
            tableMapping.ColumnMappings.Add("valid_id_no", "valid_id_no")
            tableMapping.ColumnMappings.Add("atm_card_type", "atm_card_type")
            tableMapping.ColumnMappings.Add("atm_card_no", "atm_card_no")
            tableMapping.ColumnMappings.Add("coFullName", "coFullName")
            tableMapping.ColumnMappings.Add("coAddress", "coAddress")
            tableMapping.ColumnMappings.Add("coNumber", "coNumber")
            tableMapping.ColumnMappings.Add("coOccupation", "coOccupation")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `clientaccount` WHERE (((? = 1 AND `clientID` IS NULL) OR (`clientID`"& _ 
                " = ?)) AND ((? = 1 AND `client_code` IS NULL) OR (`client_code` = ?)) AND ((? = "& _ 
                "1 AND `created_by` IS NULL) OR (`created_by` = ?)) AND ((? = 1 AND `createdDate`"& _ 
                " IS NULL) OR (`createdDate` = ?)) AND (`spouse` = ?) AND (`area` = ?) AND (`desc"& _ 
                "ription` = ?) AND ((? = 1 AND `last_name` IS NULL) OR (`last_name` = ?)) AND ((?"& _ 
                " = 1 AND `first_name` IS NULL) OR (`first_name` = ?)) AND ((? = 1 AND `middle_na"& _ 
                "me` IS NULL) OR (`middle_name` = ?)) AND ((? = 1 AND `gender` IS NULL) OR (`gend"& _ 
                "er` = ?)) AND ((? = 1 AND `age` IS NULL) OR (`age` = ?)) AND ((? = 1 AND `birth_"& _ 
                "date` IS NULL) OR (`birth_date` = ?)) AND ((? = 1 AND `civil_status` IS NULL) OR"& _ 
                " (`civil_status` = ?)) AND ((? = 1 AND `mobile_no` IS NULL) OR (`mobile_no` = ?)"& _ 
                ") AND ((? = 1 AND `email_add` IS NULL) OR (`email_add` = ?)) AND ((? = 1 AND `oc"& _ 
                "cupation` IS NULL) OR (`occupation` = ?)) AND ((? = 1 AND `home_add` IS NULL) OR"& _ 
                " (`home_add` = ?)) AND ((? = 1 AND `zipcode` IS NULL) OR (`zipcode` = ?)) AND (("& _ 
                "? = 1 AND `office_add` IS NULL) OR (`office_add` = ?)) AND ((? = 1 AND `tin_no` "& _ 
                "IS NULL) OR (`tin_no` = ?)) AND ((? = 1 AND `bank_account_type` IS NULL) OR (`ba"& _ 
                "nk_account_type` = ?)) AND ((? = 1 AND `bank_account_no` IS NULL) OR (`bank_acco"& _ 
                "unt_no` = ?)) AND ((? = 1 AND `valid_id_type` IS NULL) OR (`valid_id_type` = ?))"& _ 
                " AND ((? = 1 AND `valid_id_no` IS NULL) OR (`valid_id_no` = ?)) AND ((? = 1 AND "& _ 
                "`atm_card_type` IS NULL) OR (`atm_card_type` = ?)) AND ((? = 1 AND `atm_card_no`"& _ 
                " IS NULL) OR (`atm_card_no` = ?)) AND ((? = 1 AND `coFullName` IS NULL) OR (`coF"& _ 
                "ullName` = ?)) AND ((? = 1 AND `coAddress` IS NULL) OR (`coAddress` = ?)) AND (("& _ 
                "? = 1 AND `coNumber` IS NULL) OR (`coNumber` = ?)) AND ((? = 1 AND `coOccupation"& _ 
                "` IS NULL) OR (`coOccupation` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_clientID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "clientID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_clientID", Global.System.Data.Odbc.OdbcType.BigInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "clientID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_client_code", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_client_code", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_created_by", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_created_by", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_createdDate", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_createdDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_spouse", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "spouse", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "area", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_description", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "description", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_last_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_last_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_first_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_first_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_middle_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_middle_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_gender", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_gender", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_birth_date", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_birth_date", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_civil_status", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_civil_status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_mobile_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_mobile_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_email_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_email_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_occupation", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_occupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_home_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_home_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_zipcode", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_zipcode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_office_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_office_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_tin_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_tin_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_bank_account_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_bank_account_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_bank_account_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_bank_account_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_valid_id_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_valid_id_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_valid_id_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_valid_id_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_atm_card_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_atm_card_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_atm_card_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_atm_card_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coFullName", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coFullName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coAddress", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coAddress", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coNumber", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coNumber", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coOccupation", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coOccupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `clientaccount` (`profile_picture`, `client_code`, `created_by`, `cre"& _ 
                "atedDate`, `spouse`, `area`, `description`, `last_name`, `first_name`, `middle_n"& _ 
                "ame`, `gender`, `age`, `birth_date`, `civil_status`, `mobile_no`, `email_add`, `"& _ 
                "occupation`, `home_add`, `zipcode`, `office_add`, `tin_no`, `bank_account_type`,"& _ 
                " `bank_account_no`, `valid_id_type`, `valid_id_no`, `atm_card_type`, `atm_card_n"& _ 
                "o`, `coFullName`, `coAddress`, `coNumber`, `coOccupation`) VALUES (?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("profile_picture", Global.System.Data.Odbc.OdbcType.Image, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "profile_picture", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("client_code", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("created_by", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("createdDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("spouse", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "spouse", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "area", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("description", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "description", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("last_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("first_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("middle_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("gender", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("birth_date", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("civil_status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("mobile_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("email_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("occupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("home_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("zipcode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("office_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("tin_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("bank_account_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("bank_account_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("valid_id_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("valid_id_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("atm_card_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("atm_card_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coFullName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coAddress", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coNumber", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coOccupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `clientaccount` SET `profile_picture` = ?, `client_code` = ?, `created_by`"& _ 
                " = ?, `createdDate` = ?, `spouse` = ?, `area` = ?, `description` = ?, `last_name"& _ 
                "` = ?, `first_name` = ?, `middle_name` = ?, `gender` = ?, `age` = ?, `birth_date"& _ 
                "` = ?, `civil_status` = ?, `mobile_no` = ?, `email_add` = ?, `occupation` = ?, `"& _ 
                "home_add` = ?, `zipcode` = ?, `office_add` = ?, `tin_no` = ?, `bank_account_type"& _ 
                "` = ?, `bank_account_no` = ?, `valid_id_type` = ?, `valid_id_no` = ?, `atm_card_"& _ 
                "type` = ?, `atm_card_no` = ?, `coFullName` = ?, `coAddress` = ?, `coNumber` = ?,"& _ 
                " `coOccupation` = ? WHERE (((? = 1 AND `clientID` IS NULL) OR (`clientID` = ?)) "& _ 
                "AND ((? = 1 AND `client_code` IS NULL) OR (`client_code` = ?)) AND ((? = 1 AND `"& _ 
                "created_by` IS NULL) OR (`created_by` = ?)) AND ((? = 1 AND `createdDate` IS NUL"& _ 
                "L) OR (`createdDate` = ?)) AND (`spouse` = ?) AND (`area` = ?) AND (`description"& _ 
                "` = ?) AND ((? = 1 AND `last_name` IS NULL) OR (`last_name` = ?)) AND ((? = 1 AN"& _ 
                "D `first_name` IS NULL) OR (`first_name` = ?)) AND ((? = 1 AND `middle_name` IS "& _ 
                "NULL) OR (`middle_name` = ?)) AND ((? = 1 AND `gender` IS NULL) OR (`gender` = ?"& _ 
                ")) AND ((? = 1 AND `age` IS NULL) OR (`age` = ?)) AND ((? = 1 AND `birth_date` I"& _ 
                "S NULL) OR (`birth_date` = ?)) AND ((? = 1 AND `civil_status` IS NULL) OR (`civi"& _ 
                "l_status` = ?)) AND ((? = 1 AND `mobile_no` IS NULL) OR (`mobile_no` = ?)) AND ("& _ 
                "(? = 1 AND `email_add` IS NULL) OR (`email_add` = ?)) AND ((? = 1 AND `occupatio"& _ 
                "n` IS NULL) OR (`occupation` = ?)) AND ((? = 1 AND `home_add` IS NULL) OR (`home"& _ 
                "_add` = ?)) AND ((? = 1 AND `zipcode` IS NULL) OR (`zipcode` = ?)) AND ((? = 1 A"& _ 
                "ND `office_add` IS NULL) OR (`office_add` = ?)) AND ((? = 1 AND `tin_no` IS NULL"& _ 
                ") OR (`tin_no` = ?)) AND ((? = 1 AND `bank_account_type` IS NULL) OR (`bank_acco"& _ 
                "unt_type` = ?)) AND ((? = 1 AND `bank_account_no` IS NULL) OR (`bank_account_no`"& _ 
                " = ?)) AND ((? = 1 AND `valid_id_type` IS NULL) OR (`valid_id_type` = ?)) AND (("& _ 
                "? = 1 AND `valid_id_no` IS NULL) OR (`valid_id_no` = ?)) AND ((? = 1 AND `atm_ca"& _ 
                "rd_type` IS NULL) OR (`atm_card_type` = ?)) AND ((? = 1 AND `atm_card_no` IS NUL"& _ 
                "L) OR (`atm_card_no` = ?)) AND ((? = 1 AND `coFullName` IS NULL) OR (`coFullName"& _ 
                "` = ?)) AND ((? = 1 AND `coAddress` IS NULL) OR (`coAddress` = ?)) AND ((? = 1 A"& _ 
                "ND `coNumber` IS NULL) OR (`coNumber` = ?)) AND ((? = 1 AND `coOccupation` IS NU"& _ 
                "LL) OR (`coOccupation` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("profile_picture", Global.System.Data.Odbc.OdbcType.Image, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "profile_picture", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("client_code", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("created_by", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("createdDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("spouse", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "spouse", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "area", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("description", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "description", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("last_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("first_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("middle_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("gender", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("birth_date", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("civil_status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("mobile_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("email_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("occupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("home_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("zipcode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("office_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("tin_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("bank_account_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("bank_account_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("valid_id_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("valid_id_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("atm_card_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("atm_card_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coFullName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coAddress", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coNumber", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("coOccupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_clientID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "clientID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_clientID", Global.System.Data.Odbc.OdbcType.BigInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "clientID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_client_code", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_client_code", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "client_code", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_created_by", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_created_by", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "created_by", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_createdDate", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_createdDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "createdDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_spouse", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "spouse", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "area", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_description", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "description", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_last_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_last_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "last_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_first_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_first_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "first_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_middle_name", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_middle_name", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "middle_name", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_gender", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_gender", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "gender", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_age", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "age", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_birth_date", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_birth_date", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "birth_date", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_civil_status", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_civil_status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "civil_status", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_mobile_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_mobile_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "mobile_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_email_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_email_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "email_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_occupation", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_occupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "occupation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_home_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_home_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "home_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_zipcode", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_zipcode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "zipcode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_office_add", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_office_add", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "office_add", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_tin_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_tin_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "tin_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_bank_account_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_bank_account_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_bank_account_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_bank_account_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "bank_account_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_valid_id_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_valid_id_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_valid_id_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_valid_id_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "valid_id_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_atm_card_type", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_atm_card_type", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_type", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_atm_card_no", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_atm_card_no", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "atm_card_no", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coFullName", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coFullName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coFullName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coAddress", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coAddress", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coAddress", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coNumber", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coNumber", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coNumber", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_coOccupation", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_coOccupation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "coOccupation", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection()
            Me._connection.ConnectionString = Global.LoanManagementSystem.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `clientID`, `profile_picture`, `client_code`, `created_by`, `createdDate`,"& _ 
                " `spouse`, `area`, `description`, `last_name`, `first_name`, `middle_name`, `gen"& _ 
                "der`, `age`, `birth_date`, `civil_status`, `mobile_no`, `email_add`, `occupation"& _ 
                "`, `home_add`, `zipcode`, `office_add`, `tin_no`, `bank_account_type`, `bank_acc"& _ 
                "ount_no`, `valid_id_type`, `valid_id_no`, `atm_card_type`, `atm_card_no`, `coFul"& _ 
                "lName`, `coAddress`, `coNumber`, `coOccupation` FROM `clientaccount`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtsPayment.clientaccountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtsPayment.clientaccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtsPayment.clientaccountDataTable = New dtsPayment.clientaccountDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dtsPayment.clientaccountDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dtsPayment) As Integer
            Return Me.Adapter.Update(dataSet, "clientaccount")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_clientID As Long,  _
                    ByVal Original_client_code As String,  _
                    ByVal Original_created_by As String,  _
                    ByVal Original_createdDate As Date,  _
                    ByVal Original_spouse As String,  _
                    ByVal Original_area As String,  _
                    ByVal Original_description As String,  _
                    ByVal Original_last_name As String,  _
                    ByVal Original_first_name As String,  _
                    ByVal Original_middle_name As String,  _
                    ByVal Original_gender As String,  _
                    ByVal Original_age As Integer,  _
                    ByVal Original_birth_date As Date,  _
                    ByVal Original_civil_status As String,  _
                    ByVal Original_mobile_no As String,  _
                    ByVal Original_email_add As String,  _
                    ByVal Original_occupation As String,  _
                    ByVal Original_home_add As String,  _
                    ByVal Original_zipcode As String,  _
                    ByVal Original_office_add As String,  _
                    ByVal Original_tin_no As String,  _
                    ByVal Original_bank_account_type As String,  _
                    ByVal Original_bank_account_no As String,  _
                    ByVal Original_valid_id_type As String,  _
                    ByVal Original_valid_id_no As String,  _
                    ByVal Original_atm_card_type As String,  _
                    ByVal Original_atm_card_no As String,  _
                    ByVal Original_coFullName As String,  _
                    ByVal Original_coAddress As String,  _
                    ByVal Original_coNumber As String,  _
                    ByVal Original_coOccupation As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_clientID,Long)
            If (Original_client_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_client_code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_client_code,String)
            End If
            If (Original_created_by Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_created_by")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_created_by,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_createdDate,Date)
            If (Original_spouse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_spouse")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_spouse,String)
            End If
            If (Original_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_area,String)
            End If
            If (Original_description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_description")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_description,String)
            End If
            If (Original_last_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_last_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_last_name,String)
            End If
            If (Original_first_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_first_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_first_name,String)
            End If
            If (Original_middle_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_middle_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_middle_name,String)
            End If
            If (Original_gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_gender")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_gender,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_age,Integer)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_birth_date,Date)
            If (Original_civil_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_civil_status")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_civil_status,String)
            End If
            If (Original_mobile_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mobile_no")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_mobile_no,String)
            End If
            If (Original_email_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email_add")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_email_add,String)
            End If
            If (Original_occupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_occupation")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_occupation,String)
            End If
            If (Original_home_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_home_add")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_home_add,String)
            End If
            If (Original_zipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_zipcode")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_zipcode,String)
            End If
            If (Original_office_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_office_add")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_office_add,String)
            End If
            If (Original_tin_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tin_no")
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_tin_no,String)
            End If
            If (Original_bank_account_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bank_account_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_bank_account_type,String)
            End If
            If (Original_bank_account_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bank_account_no")
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_bank_account_no,String)
            End If
            If (Original_valid_id_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_valid_id_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_valid_id_type,String)
            End If
            If (Original_valid_id_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_valid_id_no")
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_valid_id_no,String)
            End If
            If (Original_atm_card_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_atm_card_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_atm_card_type,String)
            End If
            If (Original_atm_card_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_atm_card_no")
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_atm_card_no,String)
            End If
            If (Original_coFullName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coFullName")
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_coFullName,String)
            End If
            If (Original_coAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coAddress")
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_coAddress,String)
            End If
            If (Original_coNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coNumber")
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_coNumber,String)
            End If
            If (Original_coOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coOccupation")
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_coOccupation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal profile_picture() As Byte,  _
                    ByVal client_code As String,  _
                    ByVal created_by As String,  _
                    ByVal createdDate As Date,  _
                    ByVal spouse As String,  _
                    ByVal area As String,  _
                    ByVal description As String,  _
                    ByVal last_name As String,  _
                    ByVal first_name As String,  _
                    ByVal middle_name As String,  _
                    ByVal gender As String,  _
                    ByVal age As Integer,  _
                    ByVal birth_date As Date,  _
                    ByVal civil_status As String,  _
                    ByVal mobile_no As String,  _
                    ByVal email_add As String,  _
                    ByVal occupation As String,  _
                    ByVal home_add As String,  _
                    ByVal zipcode As String,  _
                    ByVal office_add As String,  _
                    ByVal tin_no As String,  _
                    ByVal bank_account_type As String,  _
                    ByVal bank_account_no As String,  _
                    ByVal valid_id_type As String,  _
                    ByVal valid_id_no As String,  _
                    ByVal atm_card_type As String,  _
                    ByVal atm_card_no As String,  _
                    ByVal coFullName As String,  _
                    ByVal coAddress As String,  _
                    ByVal coNumber As String,  _
                    ByVal coOccupation As String) As Integer
            If (profile_picture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("profile_picture")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(profile_picture,Byte())
            End If
            If (client_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("client_code")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(client_code,String)
            End If
            If (created_by Is Nothing) Then
                Throw New Global.System.ArgumentNullException("created_by")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(created_by,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(createdDate,Date)
            If (spouse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("spouse")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(spouse,String)
            End If
            If (area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("area")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(area,String)
            End If
            If (description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("description")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(description,String)
            End If
            If (last_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("last_name")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(last_name,String)
            End If
            If (first_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("first_name")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(first_name,String)
            End If
            If (middle_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("middle_name")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(middle_name,String)
            End If
            If (gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("gender")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(gender,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(age,Integer)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(birth_date,Date)
            If (civil_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("civil_status")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(civil_status,String)
            End If
            If (mobile_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mobile_no")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(mobile_no,String)
            End If
            If (email_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email_add")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(email_add,String)
            End If
            If (occupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("occupation")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(occupation,String)
            End If
            If (home_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("home_add")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(home_add,String)
            End If
            If (zipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("zipcode")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(zipcode,String)
            End If
            If (office_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("office_add")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(office_add,String)
            End If
            If (tin_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tin_no")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(tin_no,String)
            End If
            If (bank_account_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bank_account_type")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(bank_account_type,String)
            End If
            If (bank_account_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bank_account_no")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(bank_account_no,String)
            End If
            If (valid_id_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("valid_id_type")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(valid_id_type,String)
            End If
            If (valid_id_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("valid_id_no")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(valid_id_no,String)
            End If
            If (atm_card_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("atm_card_type")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(atm_card_type,String)
            End If
            If (atm_card_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("atm_card_no")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(atm_card_no,String)
            End If
            If (coFullName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coFullName")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(coFullName,String)
            End If
            If (coAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coAddress")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(coAddress,String)
            End If
            If (coNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coNumber")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(coNumber,String)
            End If
            If (coOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coOccupation")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(coOccupation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal profile_picture() As Byte,  _
                    ByVal client_code As String,  _
                    ByVal created_by As String,  _
                    ByVal createdDate As Date,  _
                    ByVal spouse As String,  _
                    ByVal area As String,  _
                    ByVal description As String,  _
                    ByVal last_name As String,  _
                    ByVal first_name As String,  _
                    ByVal middle_name As String,  _
                    ByVal gender As String,  _
                    ByVal age As Integer,  _
                    ByVal birth_date As Date,  _
                    ByVal civil_status As String,  _
                    ByVal mobile_no As String,  _
                    ByVal email_add As String,  _
                    ByVal occupation As String,  _
                    ByVal home_add As String,  _
                    ByVal zipcode As String,  _
                    ByVal office_add As String,  _
                    ByVal tin_no As String,  _
                    ByVal bank_account_type As String,  _
                    ByVal bank_account_no As String,  _
                    ByVal valid_id_type As String,  _
                    ByVal valid_id_no As String,  _
                    ByVal atm_card_type As String,  _
                    ByVal atm_card_no As String,  _
                    ByVal coFullName As String,  _
                    ByVal coAddress As String,  _
                    ByVal coNumber As String,  _
                    ByVal coOccupation As String,  _
                    ByVal Original_clientID As Long,  _
                    ByVal Original_client_code As String,  _
                    ByVal Original_created_by As String,  _
                    ByVal Original_createdDate As Date,  _
                    ByVal Original_spouse As String,  _
                    ByVal Original_area As String,  _
                    ByVal Original_description As String,  _
                    ByVal Original_last_name As String,  _
                    ByVal Original_first_name As String,  _
                    ByVal Original_middle_name As String,  _
                    ByVal Original_gender As String,  _
                    ByVal Original_age As Integer,  _
                    ByVal Original_birth_date As Date,  _
                    ByVal Original_civil_status As String,  _
                    ByVal Original_mobile_no As String,  _
                    ByVal Original_email_add As String,  _
                    ByVal Original_occupation As String,  _
                    ByVal Original_home_add As String,  _
                    ByVal Original_zipcode As String,  _
                    ByVal Original_office_add As String,  _
                    ByVal Original_tin_no As String,  _
                    ByVal Original_bank_account_type As String,  _
                    ByVal Original_bank_account_no As String,  _
                    ByVal Original_valid_id_type As String,  _
                    ByVal Original_valid_id_no As String,  _
                    ByVal Original_atm_card_type As String,  _
                    ByVal Original_atm_card_no As String,  _
                    ByVal Original_coFullName As String,  _
                    ByVal Original_coAddress As String,  _
                    ByVal Original_coNumber As String,  _
                    ByVal Original_coOccupation As String) As Integer
            If (profile_picture Is Nothing) Then
                Throw New Global.System.ArgumentNullException("profile_picture")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(profile_picture,Byte())
            End If
            If (client_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("client_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(client_code,String)
            End If
            If (created_by Is Nothing) Then
                Throw New Global.System.ArgumentNullException("created_by")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(created_by,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(createdDate,Date)
            If (spouse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("spouse")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(spouse,String)
            End If
            If (area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("area")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(area,String)
            End If
            If (description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("description")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(description,String)
            End If
            If (last_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("last_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(last_name,String)
            End If
            If (first_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("first_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(first_name,String)
            End If
            If (middle_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("middle_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(middle_name,String)
            End If
            If (gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(gender,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(age,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(birth_date,Date)
            If (civil_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("civil_status")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(civil_status,String)
            End If
            If (mobile_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mobile_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(mobile_no,String)
            End If
            If (email_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(email_add,String)
            End If
            If (occupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("occupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(occupation,String)
            End If
            If (home_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("home_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(home_add,String)
            End If
            If (zipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("zipcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(zipcode,String)
            End If
            If (office_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("office_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(office_add,String)
            End If
            If (tin_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tin_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(tin_no,String)
            End If
            If (bank_account_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bank_account_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(bank_account_type,String)
            End If
            If (bank_account_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bank_account_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(bank_account_no,String)
            End If
            If (valid_id_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("valid_id_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(valid_id_type,String)
            End If
            If (valid_id_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("valid_id_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(valid_id_no,String)
            End If
            If (atm_card_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("atm_card_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(atm_card_type,String)
            End If
            If (atm_card_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("atm_card_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(atm_card_no,String)
            End If
            If (coFullName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coFullName")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(coFullName,String)
            End If
            If (coAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(coAddress,String)
            End If
            If (coNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(coNumber,String)
            End If
            If (coOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("coOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(coOccupation,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_clientID,Long)
            If (Original_client_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_client_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_client_code,String)
            End If
            If (Original_created_by Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_created_by")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_created_by,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_createdDate,Date)
            If (Original_spouse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_spouse")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_spouse,String)
            End If
            If (Original_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_area,String)
            End If
            If (Original_description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_description")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_description,String)
            End If
            If (Original_last_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_last_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_last_name,String)
            End If
            If (Original_first_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_first_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_first_name,String)
            End If
            If (Original_middle_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_middle_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_middle_name,String)
            End If
            If (Original_gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_gender,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_age,Integer)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_birth_date,Date)
            If (Original_civil_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_civil_status")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_civil_status,String)
            End If
            If (Original_mobile_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mobile_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_mobile_no,String)
            End If
            If (Original_email_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_email_add,String)
            End If
            If (Original_occupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_occupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_occupation,String)
            End If
            If (Original_home_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_home_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_home_add,String)
            End If
            If (Original_zipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_zipcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_zipcode,String)
            End If
            If (Original_office_add Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_office_add")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_office_add,String)
            End If
            If (Original_tin_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tin_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_tin_no,String)
            End If
            If (Original_bank_account_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bank_account_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_bank_account_type,String)
            End If
            If (Original_bank_account_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bank_account_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_bank_account_no,String)
            End If
            If (Original_valid_id_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_valid_id_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_valid_id_type,String)
            End If
            If (Original_valid_id_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_valid_id_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_valid_id_no,String)
            End If
            If (Original_atm_card_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_atm_card_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_atm_card_type,String)
            End If
            If (Original_atm_card_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_atm_card_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_atm_card_no,String)
            End If
            If (Original_coFullName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coFullName")
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_coFullName,String)
            End If
            If (Original_coAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coAddress")
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_coAddress,String)
            End If
            If (Original_coNumber Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coNumber")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_coNumber,String)
            End If
            If (Original_coOccupation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_coOccupation")
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_coOccupation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class loanaccountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "loanaccount"
            tableMapping.ColumnMappings.Add("loanID", "loanID")
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate")
            tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy")
            tableMapping.ColumnMappings.Add("CreatedRole", "CreatedRole")
            tableMapping.ColumnMappings.Add("ClientCode", "ClientCode")
            tableMapping.ColumnMappings.Add("LedgerNo", "LedgerNo")
            tableMapping.ColumnMappings.Add("LDSNo", "LDSNo")
            tableMapping.ColumnMappings.Add("PrevLDSNo", "PrevLDSNo")
            tableMapping.ColumnMappings.Add("ClientName", "ClientName")
            tableMapping.ColumnMappings.Add("CoMaker", "CoMaker")
            tableMapping.ColumnMappings.Add("Area", "Area")
            tableMapping.ColumnMappings.Add("LoanType", "LoanType")
            tableMapping.ColumnMappings.Add("Checks", "Checks")
            tableMapping.ColumnMappings.Add("ChecksNo", "ChecksNo")
            tableMapping.ColumnMappings.Add("AcctNo", "AcctNo")
            tableMapping.ColumnMappings.Add("Cash", "Cash")
            tableMapping.ColumnMappings.Add("LoanDate", "LoanDate")
            tableMapping.ColumnMappings.Add("FirstDueDate", "FirstDueDate")
            tableMapping.ColumnMappings.Add("MaturityDate", "MaturityDate")
            tableMapping.ColumnMappings.Add("OldBalanceAmount", "OldBalanceAmount")
            tableMapping.ColumnMappings.Add("OldInterestAmount", "OldInterestAmount")
            tableMapping.ColumnMappings.Add("LoanTrans", "LoanTrans")
            tableMapping.ColumnMappings.Add("TermOfLoan", "TermOfLoan")
            tableMapping.ColumnMappings.Add("LoanAmount", "LoanAmount")
            tableMapping.ColumnMappings.Add("InterestRate", "InterestRate")
            tableMapping.ColumnMappings.Add("Principal", "Principal")
            tableMapping.ColumnMappings.Add("Interest", "Interest")
            tableMapping.ColumnMappings.Add("MonthlyAmort", "MonthlyAmort")
            tableMapping.ColumnMappings.Add("NotarialFee", "NotarialFee")
            tableMapping.ColumnMappings.Add("FinCharge", "FinCharge")
            tableMapping.ColumnMappings.Add("Accomodation", "Accomodation")
            tableMapping.ColumnMappings.Add("Inspection", "Inspection")
            tableMapping.ColumnMappings.Add("LPPP", "LPPP")
            tableMapping.ColumnMappings.Add("NewBalance", "NewBalance")
            tableMapping.ColumnMappings.Add("NetProceeds", "NetProceeds")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `loanaccount` WHERE (((? = 1 AND `loanID` IS NULL) OR (`loanID` = ?))"& _ 
                " AND (`CreatedDate` = ?) AND (`CreatedBy` = ?) AND (`CreatedRole` = ?) AND (`Cli"& _ 
                "entCode` = ?) AND (`LedgerNo` = ?) AND (`LDSNo` = ?) AND (`PrevLDSNo` = ?) AND ("& _ 
                "`ClientName` = ?) AND (`CoMaker` = ?) AND (`Area` = ?) AND (`LoanType` = ?) AND "& _ 
                "(`Checks` = ?) AND (`ChecksNo` = ?) AND (`AcctNo` = ?) AND (`Cash` = ?) AND (`Lo"& _ 
                "anDate` = ?) AND (`FirstDueDate` = ?) AND (`MaturityDate` = ?) AND (`OldBalanceA"& _ 
                "mount` = ?) AND (`OldInterestAmount` = ?) AND (`LoanTrans` = ?) AND (`TermOfLoan"& _ 
                "` = ?) AND (`LoanAmount` = ?) AND (`InterestRate` = ?) AND (`Principal` = ?) AND"& _ 
                " (`Interest` = ?) AND (`MonthlyAmort` = ?) AND (`NotarialFee` = ?) AND (`FinChar"& _ 
                "ge` = ?) AND (`Accomodation` = ?) AND (`Inspection` = ?) AND (`LPPP` = ?) AND (`"& _ 
                "NewBalance` = ?) AND (`NetProceeds` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_loanID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "loanID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_loanID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "loanID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedRole", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedRole", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ClientCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientCode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LedgerNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LedgerNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LDSNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrevLDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrevLDSNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ClientName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CoMaker", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CoMaker", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Area", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanType", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanType", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Checks", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Checks", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ChecksNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChecksNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_AcctNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AcctNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Cash", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cash", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_FirstDueDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstDueDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_MaturityDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_OldBalanceAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldBalanceAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_OldInterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldInterestAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanTrans", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanTrans", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_TermOfLoan", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TermOfLoan", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestRate", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestRate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Principal", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Principal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Interest", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Interest", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_MonthlyAmort", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MonthlyAmort", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NotarialFee", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NotarialFee", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_FinCharge", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FinCharge", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Accomodation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Accomodation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Inspection", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Inspection", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LPPP", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LPPP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NewBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NewBalance", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NetProceeds", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NetProceeds", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `loanaccount` (`CreatedDate`, `CreatedBy`, `CreatedRole`, `ClientCode"& _ 
                "`, `LedgerNo`, `LDSNo`, `PrevLDSNo`, `ClientName`, `CoMaker`, `Area`, `LoanType`"& _ 
                ", `Checks`, `ChecksNo`, `AcctNo`, `Cash`, `LoanDate`, `FirstDueDate`, `MaturityD"& _ 
                "ate`, `OldBalanceAmount`, `OldInterestAmount`, `LoanTrans`, `TermOfLoan`, `LoanA"& _ 
                "mount`, `InterestRate`, `Principal`, `Interest`, `MonthlyAmort`, `NotarialFee`, "& _ 
                "`FinCharge`, `Accomodation`, `Inspection`, `LPPP`, `NewBalance`, `NetProceeds`) "& _ 
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedRole", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedRole", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ClientCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LedgerNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LedgerNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LDSNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrevLDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrevLDSNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ClientName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CoMaker", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CoMaker", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Area", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanType", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Checks", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Checks", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ChecksNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChecksNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("AcctNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AcctNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Cash", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cash", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("FirstDueDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstDueDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("MaturityDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("OldBalanceAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldBalanceAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("OldInterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldInterestAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanTrans", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanTrans", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("TermOfLoan", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TermOfLoan", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestRate", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Principal", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Principal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Interest", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Interest", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("MonthlyAmort", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MonthlyAmort", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NotarialFee", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NotarialFee", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("FinCharge", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FinCharge", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Accomodation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Accomodation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Inspection", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Inspection", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LPPP", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LPPP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NewBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NewBalance", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NetProceeds", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NetProceeds", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `loanaccount` SET `CreatedDate` = ?, `CreatedBy` = ?, `CreatedRole` = ?, `"& _ 
                "ClientCode` = ?, `LedgerNo` = ?, `LDSNo` = ?, `PrevLDSNo` = ?, `ClientName` = ?,"& _ 
                " `CoMaker` = ?, `Area` = ?, `LoanType` = ?, `Checks` = ?, `ChecksNo` = ?, `AcctN"& _ 
                "o` = ?, `Cash` = ?, `LoanDate` = ?, `FirstDueDate` = ?, `MaturityDate` = ?, `Old"& _ 
                "BalanceAmount` = ?, `OldInterestAmount` = ?, `LoanTrans` = ?, `TermOfLoan` = ?, "& _ 
                "`LoanAmount` = ?, `InterestRate` = ?, `Principal` = ?, `Interest` = ?, `MonthlyA"& _ 
                "mort` = ?, `NotarialFee` = ?, `FinCharge` = ?, `Accomodation` = ?, `Inspection` "& _ 
                "= ?, `LPPP` = ?, `NewBalance` = ?, `NetProceeds` = ? WHERE (((? = 1 AND `loanID`"& _ 
                " IS NULL) OR (`loanID` = ?)) AND (`CreatedDate` = ?) AND (`CreatedBy` = ?) AND ("& _ 
                "`CreatedRole` = ?) AND (`ClientCode` = ?) AND (`LedgerNo` = ?) AND (`LDSNo` = ?)"& _ 
                " AND (`PrevLDSNo` = ?) AND (`ClientName` = ?) AND (`CoMaker` = ?) AND (`Area` = "& _ 
                "?) AND (`LoanType` = ?) AND (`Checks` = ?) AND (`ChecksNo` = ?) AND (`AcctNo` = "& _ 
                "?) AND (`Cash` = ?) AND (`LoanDate` = ?) AND (`FirstDueDate` = ?) AND (`Maturity"& _ 
                "Date` = ?) AND (`OldBalanceAmount` = ?) AND (`OldInterestAmount` = ?) AND (`Loan"& _ 
                "Trans` = ?) AND (`TermOfLoan` = ?) AND (`LoanAmount` = ?) AND (`InterestRate` = "& _ 
                "?) AND (`Principal` = ?) AND (`Interest` = ?) AND (`MonthlyAmort` = ?) AND (`Not"& _ 
                "arialFee` = ?) AND (`FinCharge` = ?) AND (`Accomodation` = ?) AND (`Inspection` "& _ 
                "= ?) AND (`LPPP` = ?) AND (`NewBalance` = ?) AND (`NetProceeds` = ?))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedBy", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CreatedRole", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedRole", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ClientCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LedgerNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LedgerNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LDSNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrevLDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrevLDSNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ClientName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CoMaker", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CoMaker", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Area", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanType", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanType", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Checks", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Checks", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ChecksNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChecksNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("AcctNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AcctNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Cash", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cash", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("FirstDueDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstDueDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("MaturityDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaturityDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("OldBalanceAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldBalanceAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("OldInterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldInterestAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanTrans", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanTrans", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("TermOfLoan", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TermOfLoan", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LoanAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestRate", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestRate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Principal", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Principal", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Interest", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Interest", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("MonthlyAmort", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MonthlyAmort", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NotarialFee", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NotarialFee", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("FinCharge", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FinCharge", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Accomodation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Accomodation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Inspection", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Inspection", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LPPP", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LPPP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NewBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NewBalance", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("NetProceeds", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NetProceeds", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_loanID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "loanID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_loanID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "loanID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedBy", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CreatedRole", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CreatedRole", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ClientCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientCode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LedgerNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LedgerNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LDSNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrevLDSNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrevLDSNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ClientName", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ClientName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CoMaker", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CoMaker", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Area", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Area", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanType", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanType", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Checks", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Checks", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ChecksNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChecksNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_AcctNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AcctNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Cash", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cash", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_FirstDueDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FirstDueDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_MaturityDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MaturityDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_OldBalanceAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldBalanceAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_OldInterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OldInterestAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanTrans", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanTrans", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_TermOfLoan", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TermOfLoan", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LoanAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LoanAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestRate", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestRate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Principal", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Principal", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Interest", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Interest", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_MonthlyAmort", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MonthlyAmort", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NotarialFee", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NotarialFee", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_FinCharge", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FinCharge", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Accomodation", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Accomodation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Inspection", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Inspection", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LPPP", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LPPP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NewBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NewBalance", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_NetProceeds", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NetProceeds", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection()
            Me._connection.ConnectionString = Global.LoanManagementSystem.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `loanID`, `CreatedDate`, `CreatedBy`, `CreatedRole`, `ClientCode`, `Ledger"& _ 
                "No`, `LDSNo`, `PrevLDSNo`, `ClientName`, `CoMaker`, `Area`, `LoanType`, `Checks`"& _ 
                ", `ChecksNo`, `AcctNo`, `Cash`, `LoanDate`, `FirstDueDate`, `MaturityDate`, `Old"& _ 
                "BalanceAmount`, `OldInterestAmount`, `LoanTrans`, `TermOfLoan`, `LoanAmount`, `I"& _ 
                "nterestRate`, `Principal`, `Interest`, `MonthlyAmort`, `NotarialFee`, `FinCharge"& _ 
                "`, `Accomodation`, `Inspection`, `LPPP`, `NewBalance`, `NetProceeds` FROM `loana"& _ 
                "ccount`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtsPayment.loanaccountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtsPayment.loanaccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtsPayment.loanaccountDataTable = New dtsPayment.loanaccountDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dtsPayment.loanaccountDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dtsPayment) As Integer
            Return Me.Adapter.Update(dataSet, "loanaccount")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_loanID As Integer,  _
                    ByVal Original_CreatedDate As Date,  _
                    ByVal Original_CreatedBy As String,  _
                    ByVal Original_CreatedRole As String,  _
                    ByVal Original_ClientCode As String,  _
                    ByVal Original_LedgerNo As String,  _
                    ByVal Original_LDSNo As String,  _
                    ByVal Original_PrevLDSNo As String,  _
                    ByVal Original_ClientName As String,  _
                    ByVal Original_CoMaker As String,  _
                    ByVal Original_Area As String,  _
                    ByVal Original_LoanType As String,  _
                    ByVal Original_Checks As String,  _
                    ByVal Original_ChecksNo As String,  _
                    ByVal Original_AcctNo As String,  _
                    ByVal Original_Cash As String,  _
                    ByVal Original_LoanDate As Date,  _
                    ByVal Original_FirstDueDate As Date,  _
                    ByVal Original_MaturityDate As Date,  _
                    ByVal Original_OldBalanceAmount As String,  _
                    ByVal Original_OldInterestAmount As String,  _
                    ByVal Original_LoanTrans As String,  _
                    ByVal Original_TermOfLoan As String,  _
                    ByVal Original_LoanAmount As String,  _
                    ByVal Original_InterestRate As String,  _
                    ByVal Original_Principal As String,  _
                    ByVal Original_Interest As String,  _
                    ByVal Original_MonthlyAmort As String,  _
                    ByVal Original_NotarialFee As String,  _
                    ByVal Original_FinCharge As String,  _
                    ByVal Original_Accomodation As String,  _
                    ByVal Original_Inspection As String,  _
                    ByVal Original_LPPP As String,  _
                    ByVal Original_NewBalance As String,  _
                    ByVal Original_NetProceeds As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_loanID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CreatedDate,Date)
            If (Original_CreatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CreatedBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CreatedBy,String)
            End If
            If (Original_CreatedRole Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CreatedRole")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CreatedRole,String)
            End If
            If (Original_ClientCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClientCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ClientCode,String)
            End If
            If (Original_LedgerNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LedgerNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LedgerNo,String)
            End If
            If (Original_LDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LDSNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_LDSNo,String)
            End If
            If (Original_PrevLDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrevLDSNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PrevLDSNo,String)
            End If
            If (Original_ClientName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClientName")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ClientName,String)
            End If
            If (Original_CoMaker Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CoMaker")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CoMaker,String)
            End If
            If (Original_Area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Area")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Area,String)
            End If
            If (Original_LoanType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanType")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LoanType,String)
            End If
            If (Original_Checks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Checks")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Checks,String)
            End If
            If (Original_ChecksNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ChecksNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ChecksNo,String)
            End If
            If (Original_AcctNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AcctNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_AcctNo,String)
            End If
            If (Original_Cash Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cash")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Cash,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_LoanDate,Date)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_FirstDueDate,Date)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_MaturityDate,Date)
            If (Original_OldBalanceAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OldBalanceAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_OldBalanceAmount,String)
            End If
            If (Original_OldInterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OldInterestAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_OldInterestAmount,String)
            End If
            If (Original_LoanTrans Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanTrans")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_LoanTrans,String)
            End If
            If (Original_TermOfLoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TermOfLoan")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_TermOfLoan,String)
            End If
            If (Original_LoanAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_LoanAmount,String)
            End If
            If (Original_InterestRate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestRate")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_InterestRate,String)
            End If
            If (Original_Principal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Principal")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Principal,String)
            End If
            If (Original_Interest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Interest")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_Interest,String)
            End If
            If (Original_MonthlyAmort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MonthlyAmort")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_MonthlyAmort,String)
            End If
            If (Original_NotarialFee Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NotarialFee")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_NotarialFee,String)
            End If
            If (Original_FinCharge Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FinCharge")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_FinCharge,String)
            End If
            If (Original_Accomodation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Accomodation")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_Accomodation,String)
            End If
            If (Original_Inspection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Inspection")
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Inspection,String)
            End If
            If (Original_LPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LPPP")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_LPPP,String)
            End If
            If (Original_NewBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NewBalance")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_NewBalance,String)
            End If
            If (Original_NetProceeds Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NetProceeds")
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_NetProceeds,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CreatedDate As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedRole As String,  _
                    ByVal ClientCode As String,  _
                    ByVal LedgerNo As String,  _
                    ByVal LDSNo As String,  _
                    ByVal PrevLDSNo As String,  _
                    ByVal ClientName As String,  _
                    ByVal CoMaker As String,  _
                    ByVal Area As String,  _
                    ByVal LoanType As String,  _
                    ByVal Checks As String,  _
                    ByVal ChecksNo As String,  _
                    ByVal AcctNo As String,  _
                    ByVal Cash As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal FirstDueDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal OldBalanceAmount As String,  _
                    ByVal OldInterestAmount As String,  _
                    ByVal LoanTrans As String,  _
                    ByVal TermOfLoan As String,  _
                    ByVal LoanAmount As String,  _
                    ByVal InterestRate As String,  _
                    ByVal Principal As String,  _
                    ByVal Interest As String,  _
                    ByVal MonthlyAmort As String,  _
                    ByVal NotarialFee As String,  _
                    ByVal FinCharge As String,  _
                    ByVal Accomodation As String,  _
                    ByVal Inspection As String,  _
                    ByVal LPPP As String,  _
                    ByVal NewBalance As String,  _
                    ByVal NetProceeds As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CreatedDate,Date)
            If (CreatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CreatedBy")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CreatedBy,String)
            End If
            If (CreatedRole Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CreatedRole")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CreatedRole,String)
            End If
            If (ClientCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClientCode")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ClientCode,String)
            End If
            If (LedgerNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LedgerNo")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LedgerNo,String)
            End If
            If (LDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LDSNo")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LDSNo,String)
            End If
            If (PrevLDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrevLDSNo")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PrevLDSNo,String)
            End If
            If (ClientName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClientName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ClientName,String)
            End If
            If (CoMaker Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CoMaker")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CoMaker,String)
            End If
            If (Area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Area,String)
            End If
            If (LoanType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanType")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LoanType,String)
            End If
            If (Checks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Checks")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Checks,String)
            End If
            If (ChecksNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ChecksNo")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ChecksNo,String)
            End If
            If (AcctNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AcctNo")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(AcctNo,String)
            End If
            If (Cash Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cash")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Cash,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(LoanDate,Date)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(FirstDueDate,Date)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(MaturityDate,Date)
            If (OldBalanceAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OldBalanceAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(OldBalanceAmount,String)
            End If
            If (OldInterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OldInterestAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(OldInterestAmount,String)
            End If
            If (LoanTrans Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanTrans")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LoanTrans,String)
            End If
            If (TermOfLoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TermOfLoan")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(TermOfLoan,String)
            End If
            If (LoanAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(LoanAmount,String)
            End If
            If (InterestRate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestRate")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(InterestRate,String)
            End If
            If (Principal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Principal")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Principal,String)
            End If
            If (Interest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Interest")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Interest,String)
            End If
            If (MonthlyAmort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MonthlyAmort")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(MonthlyAmort,String)
            End If
            If (NotarialFee Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NotarialFee")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(NotarialFee,String)
            End If
            If (FinCharge Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FinCharge")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(FinCharge,String)
            End If
            If (Accomodation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Accomodation")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Accomodation,String)
            End If
            If (Inspection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Inspection")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Inspection,String)
            End If
            If (LPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LPPP")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(LPPP,String)
            End If
            If (NewBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NewBalance")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(NewBalance,String)
            End If
            If (NetProceeds Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NetProceeds")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(NetProceeds,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CreatedDate As Date,  _
                    ByVal CreatedBy As String,  _
                    ByVal CreatedRole As String,  _
                    ByVal ClientCode As String,  _
                    ByVal LedgerNo As String,  _
                    ByVal LDSNo As String,  _
                    ByVal PrevLDSNo As String,  _
                    ByVal ClientName As String,  _
                    ByVal CoMaker As String,  _
                    ByVal Area As String,  _
                    ByVal LoanType As String,  _
                    ByVal Checks As String,  _
                    ByVal ChecksNo As String,  _
                    ByVal AcctNo As String,  _
                    ByVal Cash As String,  _
                    ByVal LoanDate As Date,  _
                    ByVal FirstDueDate As Date,  _
                    ByVal MaturityDate As Date,  _
                    ByVal OldBalanceAmount As String,  _
                    ByVal OldInterestAmount As String,  _
                    ByVal LoanTrans As String,  _
                    ByVal TermOfLoan As String,  _
                    ByVal LoanAmount As String,  _
                    ByVal InterestRate As String,  _
                    ByVal Principal As String,  _
                    ByVal Interest As String,  _
                    ByVal MonthlyAmort As String,  _
                    ByVal NotarialFee As String,  _
                    ByVal FinCharge As String,  _
                    ByVal Accomodation As String,  _
                    ByVal Inspection As String,  _
                    ByVal LPPP As String,  _
                    ByVal NewBalance As String,  _
                    ByVal NetProceeds As String,  _
                    ByVal Original_loanID As Integer,  _
                    ByVal Original_CreatedDate As Date,  _
                    ByVal Original_CreatedBy As String,  _
                    ByVal Original_CreatedRole As String,  _
                    ByVal Original_ClientCode As String,  _
                    ByVal Original_LedgerNo As String,  _
                    ByVal Original_LDSNo As String,  _
                    ByVal Original_PrevLDSNo As String,  _
                    ByVal Original_ClientName As String,  _
                    ByVal Original_CoMaker As String,  _
                    ByVal Original_Area As String,  _
                    ByVal Original_LoanType As String,  _
                    ByVal Original_Checks As String,  _
                    ByVal Original_ChecksNo As String,  _
                    ByVal Original_AcctNo As String,  _
                    ByVal Original_Cash As String,  _
                    ByVal Original_LoanDate As Date,  _
                    ByVal Original_FirstDueDate As Date,  _
                    ByVal Original_MaturityDate As Date,  _
                    ByVal Original_OldBalanceAmount As String,  _
                    ByVal Original_OldInterestAmount As String,  _
                    ByVal Original_LoanTrans As String,  _
                    ByVal Original_TermOfLoan As String,  _
                    ByVal Original_LoanAmount As String,  _
                    ByVal Original_InterestRate As String,  _
                    ByVal Original_Principal As String,  _
                    ByVal Original_Interest As String,  _
                    ByVal Original_MonthlyAmort As String,  _
                    ByVal Original_NotarialFee As String,  _
                    ByVal Original_FinCharge As String,  _
                    ByVal Original_Accomodation As String,  _
                    ByVal Original_Inspection As String,  _
                    ByVal Original_LPPP As String,  _
                    ByVal Original_NewBalance As String,  _
                    ByVal Original_NetProceeds As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CreatedDate,Date)
            If (CreatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CreatedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CreatedBy,String)
            End If
            If (CreatedRole Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CreatedRole")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CreatedRole,String)
            End If
            If (ClientCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClientCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ClientCode,String)
            End If
            If (LedgerNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LedgerNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LedgerNo,String)
            End If
            If (LDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LDSNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LDSNo,String)
            End If
            If (PrevLDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrevLDSNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PrevLDSNo,String)
            End If
            If (ClientName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ClientName")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ClientName,String)
            End If
            If (CoMaker Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CoMaker")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CoMaker,String)
            End If
            If (Area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Area,String)
            End If
            If (LoanType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanType")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LoanType,String)
            End If
            If (Checks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Checks")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Checks,String)
            End If
            If (ChecksNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ChecksNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ChecksNo,String)
            End If
            If (AcctNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AcctNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(AcctNo,String)
            End If
            If (Cash Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cash")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Cash,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(LoanDate,Date)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(FirstDueDate,Date)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MaturityDate,Date)
            If (OldBalanceAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OldBalanceAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(OldBalanceAmount,String)
            End If
            If (OldInterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OldInterestAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(OldInterestAmount,String)
            End If
            If (LoanTrans Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanTrans")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LoanTrans,String)
            End If
            If (TermOfLoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TermOfLoan")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(TermOfLoan,String)
            End If
            If (LoanAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LoanAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LoanAmount,String)
            End If
            If (InterestRate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestRate")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(InterestRate,String)
            End If
            If (Principal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Principal")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Principal,String)
            End If
            If (Interest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Interest")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Interest,String)
            End If
            If (MonthlyAmort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MonthlyAmort")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(MonthlyAmort,String)
            End If
            If (NotarialFee Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NotarialFee")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(NotarialFee,String)
            End If
            If (FinCharge Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FinCharge")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(FinCharge,String)
            End If
            If (Accomodation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Accomodation")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Accomodation,String)
            End If
            If (Inspection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Inspection")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Inspection,String)
            End If
            If (LPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LPPP")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(LPPP,String)
            End If
            If (NewBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NewBalance")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(NewBalance,String)
            End If
            If (NetProceeds Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NetProceeds")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(NetProceeds,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_loanID,Integer)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_CreatedDate,Date)
            If (Original_CreatedBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CreatedBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_CreatedBy,String)
            End If
            If (Original_CreatedRole Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CreatedRole")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_CreatedRole,String)
            End If
            If (Original_ClientCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClientCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ClientCode,String)
            End If
            If (Original_LedgerNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LedgerNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_LedgerNo,String)
            End If
            If (Original_LDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LDSNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_LDSNo,String)
            End If
            If (Original_PrevLDSNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrevLDSNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PrevLDSNo,String)
            End If
            If (Original_ClientName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ClientName")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_ClientName,String)
            End If
            If (Original_CoMaker Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CoMaker")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_CoMaker,String)
            End If
            If (Original_Area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Area")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Area,String)
            End If
            If (Original_LoanType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanType")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_LoanType,String)
            End If
            If (Original_Checks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Checks")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Checks,String)
            End If
            If (Original_ChecksNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ChecksNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_ChecksNo,String)
            End If
            If (Original_AcctNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AcctNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_AcctNo,String)
            End If
            If (Original_Cash Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cash")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Cash,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_LoanDate,Date)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_FirstDueDate,Date)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_MaturityDate,Date)
            If (Original_OldBalanceAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OldBalanceAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_OldBalanceAmount,String)
            End If
            If (Original_OldInterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OldInterestAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_OldInterestAmount,String)
            End If
            If (Original_LoanTrans Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanTrans")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_LoanTrans,String)
            End If
            If (Original_TermOfLoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TermOfLoan")
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_TermOfLoan,String)
            End If
            If (Original_LoanAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LoanAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_LoanAmount,String)
            End If
            If (Original_InterestRate Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestRate")
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_InterestRate,String)
            End If
            If (Original_Principal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Principal")
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_Principal,String)
            End If
            If (Original_Interest Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Interest")
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_Interest,String)
            End If
            If (Original_MonthlyAmort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MonthlyAmort")
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MonthlyAmort,String)
            End If
            If (Original_NotarialFee Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NotarialFee")
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_NotarialFee,String)
            End If
            If (Original_FinCharge Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FinCharge")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_FinCharge,String)
            End If
            If (Original_Accomodation Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Accomodation")
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_Accomodation,String)
            End If
            If (Original_Inspection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Inspection")
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_Inspection,String)
            End If
            If (Original_LPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LPPP")
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_LPPP,String)
            End If
            If (Original_NewBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NewBalance")
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_NewBalance,String)
            End If
            If (Original_NetProceeds Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NetProceeds")
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_NetProceeds,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class paymentledgerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "paymentledger"
            tableMapping.ColumnMappings.Add("ldgID", "ldgID")
            tableMapping.ColumnMappings.Add("ProcessBy", "ProcessBy")
            tableMapping.ColumnMappings.Add("Paymode", "Paymode")
            tableMapping.ColumnMappings.Add("DepBank", "DepBank")
            tableMapping.ColumnMappings.Add("CHKNo", "CHKNo")
            tableMapping.ColumnMappings.Add("CHKAmount", "CHKAmount")
            tableMapping.ColumnMappings.Add("Refund", "Refund")
            tableMapping.ColumnMappings.Add("CustomerCode", "CustomerCode")
            tableMapping.ColumnMappings.Add("LGNo", "LGNo")
            tableMapping.ColumnMappings.Add("ReceiptNo", "ReceiptNo")
            tableMapping.ColumnMappings.Add("PayDate", "PayDate")
            tableMapping.ColumnMappings.Add("PrinAmount", "PrinAmount")
            tableMapping.ColumnMappings.Add("PrinPayment", "PrinPayment")
            tableMapping.ColumnMappings.Add("PrinBalance", "PrinBalance")
            tableMapping.ColumnMappings.Add("InterestAmount", "InterestAmount")
            tableMapping.ColumnMappings.Add("InterestPayment", "InterestPayment")
            tableMapping.ColumnMappings.Add("TotalPayable", "TotalPayable")
            tableMapping.ColumnMappings.Add("Penalty", "Penalty")
            tableMapping.ColumnMappings.Add("Status", "Status")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `paymentledger` WHERE (((? = 1 AND `ldgID` IS NULL) OR (`ldgID` = ?))"& _ 
                " AND (`ProcessBy` = ?) AND ((? = 1 AND `Paymode` IS NULL) OR (`Paymode` = ?)) AN"& _ 
                "D ((? = 1 AND `DepBank` IS NULL) OR (`DepBank` = ?)) AND ((? = 1 AND `CHKNo` IS "& _ 
                "NULL) OR (`CHKNo` = ?)) AND ((? = 1 AND `CHKAmount` IS NULL) OR (`CHKAmount` = ?"& _ 
                ")) AND ((? = 1 AND `Refund` IS NULL) OR (`Refund` = ?)) AND (`CustomerCode` = ?)"& _ 
                " AND (`LGNo` = ?) AND ((? = 1 AND `ReceiptNo` IS NULL) OR (`ReceiptNo` = ?)) AND"& _ 
                " ((? = 1 AND `PayDate` IS NULL) OR (`PayDate` = ?)) AND ((? = 1 AND `PrinAmount`"& _ 
                " IS NULL) OR (`PrinAmount` = ?)) AND ((? = 1 AND `PrinPayment` IS NULL) OR (`Pri"& _ 
                "nPayment` = ?)) AND ((? = 1 AND `PrinBalance` IS NULL) OR (`PrinBalance` = ?)) A"& _ 
                "ND ((? = 1 AND `InterestAmount` IS NULL) OR (`InterestAmount` = ?)) AND ((? = 1 "& _ 
                "AND `InterestPayment` IS NULL) OR (`InterestPayment` = ?)) AND ((? = 1 AND `Tota"& _ 
                "lPayable` IS NULL) OR (`TotalPayable` = ?)) AND ((? = 1 AND `Penalty` IS NULL) O"& _ 
                "R (`Penalty` = ?)) AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_ldgID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ldgID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ldgID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ldgID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ProcessBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProcessBy", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Paymode", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Paymode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_DepBank", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_DepBank", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_CHKNo", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CHKNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_CHKAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CHKAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Refund", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Refund", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CustomerCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustomerCode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LGNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LGNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_ReceiptNo", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ReceiptNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PayDate", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PayDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinPayment", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinBalance", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_InterestAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_InterestPayment", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_TotalPayable", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_TotalPayable", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Penalty", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Penalty", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Status", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `paymentledger` (`ProcessBy`, `Paymode`, `DepBank`, `CHKNo`, `CHKAmou"& _ 
                "nt`, `Refund`, `CustomerCode`, `LGNo`, `ReceiptNo`, `PayDate`, `PrinAmount`, `Pr"& _ 
                "inPayment`, `PrinBalance`, `InterestAmount`, `InterestPayment`, `TotalPayable`, "& _ 
                "`Penalty`, `Status`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ProcessBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProcessBy", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Paymode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("DepBank", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CHKNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CHKAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Refund", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CustomerCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustomerCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LGNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LGNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ReceiptNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PayDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("TotalPayable", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Penalty", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.Odbc.OdbcCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `paymentledger` SET `ProcessBy` = ?, `Paymode` = ?, `DepBank` = ?, `CHKNo`"& _ 
                " = ?, `CHKAmount` = ?, `Refund` = ?, `CustomerCode` = ?, `LGNo` = ?, `ReceiptNo`"& _ 
                " = ?, `PayDate` = ?, `PrinAmount` = ?, `PrinPayment` = ?, `PrinBalance` = ?, `In"& _ 
                "terestAmount` = ?, `InterestPayment` = ?, `TotalPayable` = ?, `Penalty` = ?, `St"& _ 
                "atus` = ? WHERE (((? = 1 AND `ldgID` IS NULL) OR (`ldgID` = ?)) AND (`ProcessBy`"& _ 
                " = ?) AND ((? = 1 AND `Paymode` IS NULL) OR (`Paymode` = ?)) AND ((? = 1 AND `De"& _ 
                "pBank` IS NULL) OR (`DepBank` = ?)) AND ((? = 1 AND `CHKNo` IS NULL) OR (`CHKNo`"& _ 
                " = ?)) AND ((? = 1 AND `CHKAmount` IS NULL) OR (`CHKAmount` = ?)) AND ((? = 1 AN"& _ 
                "D `Refund` IS NULL) OR (`Refund` = ?)) AND (`CustomerCode` = ?) AND (`LGNo` = ?)"& _ 
                " AND ((? = 1 AND `ReceiptNo` IS NULL) OR (`ReceiptNo` = ?)) AND ((? = 1 AND `Pay"& _ 
                "Date` IS NULL) OR (`PayDate` = ?)) AND ((? = 1 AND `PrinAmount` IS NULL) OR (`Pr"& _ 
                "inAmount` = ?)) AND ((? = 1 AND `PrinPayment` IS NULL) OR (`PrinPayment` = ?)) A"& _ 
                "ND ((? = 1 AND `PrinBalance` IS NULL) OR (`PrinBalance` = ?)) AND ((? = 1 AND `I"& _ 
                "nterestAmount` IS NULL) OR (`InterestAmount` = ?)) AND ((? = 1 AND `InterestPaym"& _ 
                "ent` IS NULL) OR (`InterestPayment` = ?)) AND ((? = 1 AND `TotalPayable` IS NULL"& _ 
                ") OR (`TotalPayable` = ?)) AND ((? = 1 AND `Penalty` IS NULL) OR (`Penalty` = ?)"& _ 
                ") AND ((? = 1 AND `Status` IS NULL) OR (`Status` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ProcessBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProcessBy", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Paymode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("DepBank", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CHKNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CHKAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Refund", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("CustomerCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustomerCode", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("LGNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LGNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("ReceiptNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PayDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("PrinBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("InterestPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("TotalPayable", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Penalty", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_ldgID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ldgID", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ldgID", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ldgID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ProcessBy", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProcessBy", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Paymode", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Paymode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Paymode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_DepBank", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_DepBank", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DepBank", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_CHKNo", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CHKNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_CHKAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CHKAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CHKAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Refund", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Refund", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Refund", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_CustomerCode", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CustomerCode", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_LGNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LGNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_ReceiptNo", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_ReceiptNo", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ReceiptNo", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PayDate", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PayDate", Global.System.Data.Odbc.OdbcType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PayDate", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinPayment", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinPayment", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_PrinBalance", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_PrinBalance", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PrinBalance", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_InterestAmount", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestAmount", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestAmount", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_InterestPayment", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_InterestPayment", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "InterestPayment", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_TotalPayable", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_TotalPayable", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TotalPayable", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Penalty", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Penalty", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Penalty", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("IsNull_Status", Global.System.Data.Odbc.OdbcType.Int, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("Original_Status", Global.System.Data.Odbc.OdbcType.VarChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Status", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection()
            Me._connection.ConnectionString = Global.LoanManagementSystem.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `ldgID`, `ProcessBy`, `Paymode`, `DepBank`, `CHKNo`, `CHKAmount`, `Refund`"& _ 
                ", `CustomerCode`, `LGNo`, `ReceiptNo`, `PayDate`, `PrinAmount`, `PrinPayment`, `"& _ 
                "PrinBalance`, `InterestAmount`, `InterestPayment`, `TotalPayable`, `Penalty`, `S"& _ 
                "tatus` FROM `paymentledger`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtsPayment.paymentledgerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtsPayment.paymentledgerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtsPayment.paymentledgerDataTable = New dtsPayment.paymentledgerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dtsPayment.paymentledgerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dtsPayment) As Integer
            Return Me.Adapter.Update(dataSet, "paymentledger")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ldgID As Integer,  _
                    ByVal Original_ProcessBy As String,  _
                    ByVal Original_Paymode As String,  _
                    ByVal Original_DepBank As String,  _
                    ByVal Original_CHKNo As String,  _
                    ByVal Original_CHKAmount As String,  _
                    ByVal Original_Refund As String,  _
                    ByVal Original_CustomerCode As String,  _
                    ByVal Original_LGNo As String,  _
                    ByVal Original_ReceiptNo As String,  _
                    ByVal Original_PayDate As Date,  _
                    ByVal Original_PrinAmount As String,  _
                    ByVal Original_PrinPayment As String,  _
                    ByVal Original_PrinBalance As String,  _
                    ByVal Original_InterestAmount As String,  _
                    ByVal Original_InterestPayment As String,  _
                    ByVal Original_TotalPayable As String,  _
                    ByVal Original_Penalty As String,  _
                    ByVal Original_Status As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ldgID,Integer)
            If (Original_ProcessBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProcessBy")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ProcessBy,String)
            End If
            If (Original_Paymode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Paymode")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Paymode,String)
            End If
            If (Original_DepBank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DepBank")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DepBank,String)
            End If
            If (Original_CHKNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CHKNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CHKNo,String)
            End If
            If (Original_CHKAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CHKAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CHKAmount,String)
            End If
            If (Original_Refund Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Refund")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Refund,String)
            End If
            If (Original_CustomerCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CustomerCode")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_CustomerCode,String)
            End If
            If (Original_LGNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LGNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LGNo,String)
            End If
            If (Original_ReceiptNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ReceiptNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ReceiptNo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PayDate,Date)
            If (Original_PrinAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PrinAmount,String)
            End If
            If (Original_PrinPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinPayment")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PrinPayment,String)
            End If
            If (Original_PrinBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinBalance")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PrinBalance,String)
            End If
            If (Original_InterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestAmount")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_InterestAmount,String)
            End If
            If (Original_InterestPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestPayment")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_InterestPayment,String)
            End If
            If (Original_TotalPayable Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TotalPayable")
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_TotalPayable,String)
            End If
            If (Original_Penalty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Penalty")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Penalty,String)
            End If
            If (Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ProcessBy As String,  _
                    ByVal Paymode As String,  _
                    ByVal DepBank As String,  _
                    ByVal CHKNo As String,  _
                    ByVal CHKAmount As String,  _
                    ByVal Refund As String,  _
                    ByVal CustomerCode As String,  _
                    ByVal LGNo As String,  _
                    ByVal ReceiptNo As String,  _
                    ByVal PayDate As Date,  _
                    ByVal PrinAmount As String,  _
                    ByVal PrinPayment As String,  _
                    ByVal PrinBalance As String,  _
                    ByVal InterestAmount As String,  _
                    ByVal InterestPayment As String,  _
                    ByVal TotalPayable As String,  _
                    ByVal Penalty As String,  _
                    ByVal Status As String) As Integer
            If (ProcessBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProcessBy")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ProcessBy,String)
            End If
            If (Paymode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Paymode")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Paymode,String)
            End If
            If (DepBank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DepBank")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DepBank,String)
            End If
            If (CHKNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CHKNo")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CHKNo,String)
            End If
            If (CHKAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CHKAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CHKAmount,String)
            End If
            If (Refund Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Refund")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Refund,String)
            End If
            If (CustomerCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomerCode")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CustomerCode,String)
            End If
            If (LGNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LGNo")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LGNo,String)
            End If
            If (ReceiptNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ReceiptNo")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ReceiptNo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PayDate,Date)
            If (PrinAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PrinAmount,String)
            End If
            If (PrinPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinPayment")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PrinPayment,String)
            End If
            If (PrinBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinBalance")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PrinBalance,String)
            End If
            If (InterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestAmount")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(InterestAmount,String)
            End If
            If (InterestPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestPayment")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(InterestPayment,String)
            End If
            If (TotalPayable Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TotalPayable")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TotalPayable,String)
            End If
            If (Penalty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Penalty")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Penalty,String)
            End If
            If (Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ProcessBy As String,  _
                    ByVal Paymode As String,  _
                    ByVal DepBank As String,  _
                    ByVal CHKNo As String,  _
                    ByVal CHKAmount As String,  _
                    ByVal Refund As String,  _
                    ByVal CustomerCode As String,  _
                    ByVal LGNo As String,  _
                    ByVal ReceiptNo As String,  _
                    ByVal PayDate As Date,  _
                    ByVal PrinAmount As String,  _
                    ByVal PrinPayment As String,  _
                    ByVal PrinBalance As String,  _
                    ByVal InterestAmount As String,  _
                    ByVal InterestPayment As String,  _
                    ByVal TotalPayable As String,  _
                    ByVal Penalty As String,  _
                    ByVal Status As String,  _
                    ByVal Original_ldgID As Integer,  _
                    ByVal Original_ProcessBy As String,  _
                    ByVal Original_Paymode As String,  _
                    ByVal Original_DepBank As String,  _
                    ByVal Original_CHKNo As String,  _
                    ByVal Original_CHKAmount As String,  _
                    ByVal Original_Refund As String,  _
                    ByVal Original_CustomerCode As String,  _
                    ByVal Original_LGNo As String,  _
                    ByVal Original_ReceiptNo As String,  _
                    ByVal Original_PayDate As Date,  _
                    ByVal Original_PrinAmount As String,  _
                    ByVal Original_PrinPayment As String,  _
                    ByVal Original_PrinBalance As String,  _
                    ByVal Original_InterestAmount As String,  _
                    ByVal Original_InterestPayment As String,  _
                    ByVal Original_TotalPayable As String,  _
                    ByVal Original_Penalty As String,  _
                    ByVal Original_Status As String) As Integer
            If (ProcessBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProcessBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ProcessBy,String)
            End If
            If (Paymode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Paymode")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Paymode,String)
            End If
            If (DepBank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DepBank")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DepBank,String)
            End If
            If (CHKNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CHKNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CHKNo,String)
            End If
            If (CHKAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CHKAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CHKAmount,String)
            End If
            If (Refund Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Refund")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Refund,String)
            End If
            If (CustomerCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomerCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CustomerCode,String)
            End If
            If (LGNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LGNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LGNo,String)
            End If
            If (ReceiptNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ReceiptNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ReceiptNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PayDate,Date)
            If (PrinAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PrinAmount,String)
            End If
            If (PrinPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinPayment")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PrinPayment,String)
            End If
            If (PrinBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrinBalance")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PrinBalance,String)
            End If
            If (InterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(InterestAmount,String)
            End If
            If (InterestPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("InterestPayment")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(InterestPayment,String)
            End If
            If (TotalPayable Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TotalPayable")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TotalPayable,String)
            End If
            If (Penalty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Penalty")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Penalty,String)
            End If
            If (Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ldgID,Integer)
            If (Original_ProcessBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ProcessBy")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ProcessBy,String)
            End If
            If (Original_Paymode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Paymode")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Paymode,String)
            End If
            If (Original_DepBank Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DepBank")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_DepBank,String)
            End If
            If (Original_CHKNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CHKNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_CHKNo,String)
            End If
            If (Original_CHKAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CHKAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CHKAmount,String)
            End If
            If (Original_Refund Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Refund")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Refund,String)
            End If
            If (Original_CustomerCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CustomerCode")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CustomerCode,String)
            End If
            If (Original_LGNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LGNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_LGNo,String)
            End If
            If (Original_ReceiptNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ReceiptNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ReceiptNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_PayDate,Date)
            If (Original_PrinAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PrinAmount,String)
            End If
            If (Original_PrinPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinPayment")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PrinPayment,String)
            End If
            If (Original_PrinBalance Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PrinBalance")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PrinBalance,String)
            End If
            If (Original_InterestAmount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestAmount")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_InterestAmount,String)
            End If
            If (Original_InterestPayment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_InterestPayment")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_InterestPayment,String)
            End If
            If (Original_TotalPayable Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TotalPayable")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_TotalPayable,String)
            End If
            If (Original_Penalty Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Penalty")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Penalty,String)
            End If
            If (Original_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _clientaccountTableAdapter As clientaccountTableAdapter
        
        Private _loanaccountTableAdapter As loanaccountTableAdapter
        
        Private _paymentledgerTableAdapter As paymentledgerTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property clientaccountTableAdapter() As clientaccountTableAdapter
            Get
                Return Me._clientaccountTableAdapter
            End Get
            Set
                Me._clientaccountTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property loanaccountTableAdapter() As loanaccountTableAdapter
            Get
                Return Me._loanaccountTableAdapter
            End Get
            Set
                Me._loanaccountTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property paymentledgerTableAdapter() As paymentledgerTableAdapter
            Get
                Return Me._paymentledgerTableAdapter
            End Get
            Set
                Me._paymentledgerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._clientaccountTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._clientaccountTableAdapter.Connection) Is Nothing)) Then
                    Return Me._clientaccountTableAdapter.Connection
                End If
                If ((Not (Me._loanaccountTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._loanaccountTableAdapter.Connection) Is Nothing)) Then
                    Return Me._loanaccountTableAdapter.Connection
                End If
                If ((Not (Me._paymentledgerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._paymentledgerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._paymentledgerTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dtsPayment, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.paymentledger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._paymentledgerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.loanaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._loanaccountTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.clientaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._clientaccountTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dtsPayment, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.paymentledger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._paymentledgerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.loanaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._loanaccountTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.clientaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._clientaccountTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dtsPayment, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.clientaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._clientaccountTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.loanaccount.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._loanaccountTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.paymentledger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._paymentledgerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dtsPayment) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._clientaccountTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._clientaccountTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._loanaccountTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._loanaccountTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._paymentledgerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._paymentledgerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._clientaccountTableAdapter, Me._clientaccountTableAdapter.Connection)
                    Me._clientaccountTableAdapter.Connection = CType(workConnection,Global.System.Data.Odbc.OdbcConnection)
                    Me._clientaccountTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Odbc.OdbcTransaction)
                    If Me._clientaccountTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._clientaccountTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._clientaccountTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._loanaccountTableAdapter, Me._loanaccountTableAdapter.Connection)
                    Me._loanaccountTableAdapter.Connection = CType(workConnection,Global.System.Data.Odbc.OdbcConnection)
                    Me._loanaccountTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Odbc.OdbcTransaction)
                    If Me._loanaccountTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._loanaccountTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._loanaccountTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._paymentledgerTableAdapter, Me._paymentledgerTableAdapter.Connection)
                    Me._paymentledgerTableAdapter.Connection = CType(workConnection,Global.System.Data.Odbc.OdbcConnection)
                    Me._paymentledgerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Odbc.OdbcTransaction)
                    If Me._paymentledgerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._paymentledgerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._paymentledgerTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._clientaccountTableAdapter) Is Nothing) Then
                    Me._clientaccountTableAdapter.Connection = CType(revertConnections(Me._clientaccountTableAdapter),Global.System.Data.Odbc.OdbcConnection)
                    Me._clientaccountTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._loanaccountTableAdapter) Is Nothing) Then
                    Me._loanaccountTableAdapter.Connection = CType(revertConnections(Me._loanaccountTableAdapter),Global.System.Data.Odbc.OdbcConnection)
                    Me._loanaccountTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._paymentledgerTableAdapter) Is Nothing) Then
                    Me._paymentledgerTableAdapter.Connection = CType(revertConnections(Me._paymentledgerTableAdapter),Global.System.Data.Odbc.OdbcConnection)
                    Me._paymentledgerTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
